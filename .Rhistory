condition == cond, prop == prop_i) %>%
arrange(RT)
# 三等分变量
quantile_con <- quantile(sub_con_data$RT, probs = c(1,2,3)/3)
quantile_inc <- quantile(sub_inc_data$RT, probs = c(1,2,3)/3)
# 分别计算每部份的 Simon 效应
RT_part_1 <- mean(sub_inc_data$RT[sub_inc_data$RT
<= quantile_inc[1]]) -
mean(sub_con_data$RT[sub_con_data$RT
<= quantile_con[1]])
RT_part_2 <- mean(sub_inc_data$RT[sub_inc_data$RT
<= quantile_inc[2] &
sub_inc_data$RT > quantile_inc[1]]) -
mean(sub_con_data$RT[sub_con_data$RT
<= quantile_con[2] &
sub_con_data$RT > quantile_con[1]])
RT_part_3 <- mean(sub_inc_data$RT[sub_inc_data$RT
<= quantile_inc[3] &
sub_inc_data$RT > quantile_inc[2]]) -
mean(sub_con_data$RT[sub_con_data$RT
<= quantile_con[3] &
sub_con_data$RT > quantile_con[2]])
result_list[[result_count]] <- cbind(sub, cond, prop_i,
RT_part_1, RT_part_2, RT_part_3,
mean_RT = mean(sub_inc_data$RT) -
mean(sub_con_data$RT))
result_count = result_count + 1
}
# Summarize the data to statistic
data_without_outlier %>%
group_by(prop, condition) %>%
dplyr::select(Subject_num, congruency,
condition, prop, RT, bl_sr_PE) -> for_delta_plot
#  Divide the data in each condition
con_data <- dplyr::filter(for_delta_plot, congruency == "con")
inc_data <- dplyr::filter(for_delta_plot, congruency == "inc")
result_list <- list()
result_count <- 1
for (sub in unique(for_delta_plot$Subject_num)) {
for (cond in unique(for_delta_plot$condition)) {
for (prop_i in unique(for_delta_plot$prop)) {
sub_con_data <- filter(con_data, Subject_num == sub,
condition == cond, prop == prop_i) %>%
arrange(RT)
sub_inc_data <- filter(inc_data, Subject_num == sub,
condition == cond, prop == prop_i) %>%
arrange(RT)
# 三等分变量
quantile_con <- quantile(sub_con_data$RT, probs = c(1,2,3)/3)
quantile_inc <- quantile(sub_inc_data$RT, probs = c(1,2,3)/3)
# 分别计算每部份的 Simon 效应
RT_part_1 <- mean(sub_inc_data$RT[sub_inc_data$RT
<= quantile_inc[1]]) -
mean(sub_con_data$RT[sub_con_data$RT
<= quantile_con[1]])
RT_part_2 <- mean(sub_inc_data$RT[sub_inc_data$RT
<= quantile_inc[2] &
sub_inc_data$RT > quantile_inc[1]]) -
mean(sub_con_data$RT[sub_con_data$RT
<= quantile_con[2] &
sub_con_data$RT > quantile_con[1]])
RT_part_3 <- mean(sub_inc_data$RT[sub_inc_data$RT
<= quantile_inc[3] &
sub_inc_data$RT > quantile_inc[2]]) -
mean(sub_con_data$RT[sub_con_data$RT
<= quantile_con[3] &
sub_con_data$RT > quantile_con[2]])
result_list[[result_count]] <- cbind(sub, cond, prop_i,
RT_part_1, RT_part_2, RT_part_3,
mean_RT = mean(sub_inc_data$RT) -
mean(sub_con_data$RT))
result_count = result_count + 1
}
# 聚合数据
do.call(rbind.data.frame, result_list) %>%
pivot_longer(cols = starts_with("RT_"),
names_to = "RT_size",
values_to = "Simon_effect") -> delta_plot_table_RT
delta_plot_table_RT$Simon_effect <- as.numeric(delta_plot_table_RT$Simon_effect)
delta_plot_table_RT %>%
group_by(cond, prop_i, RT_size) %>%
summarise(mean_Simon_effect = mean(Simon_effect)) -> delta_plot_table_RT_2
delta_plot_table_RT_2$RT_size <- as.numeric(
str_remove(delta_plot_table_RT_2$RT_size, "RT_part_"))
delta_plot_table_RT_2 %>%
ggplot(aes(x = RT_size, y = mean_Simon_effect)) +
geom_point(aes(color = prop_i, shape = cond), size = 3) +
geom_line(aes(color = prop_i, linetype = cond))
delta_plot_table_RT_2 %>%
group_by(cond, prop_i) %>%
summarise(mean1_Simon_effect = mean(mean_Simon_effect))
delta_plot_table_RT_2
delta_plot_table_RT_2 %>% pivot_wider(names_from = cond, prop_i, RT_size, values_from = mean_Simon_effect)
delta_plot_table_RT_2 %>% pivot_wider(names_from = c(cond, prop_i, RT_size), values_from = mean_Simon_effect)
delta_plot_table_RT %>% pivot_wider(names_from = c(cond, prop_i, RT_size), values_from = mean_Simon_effect)
delta_plot_table_RT %>% pivot_wider(names_from = c(cond, prop_i, RT_size), values_from = Simon_effect)
delta_plot_table_RT %>% select(-mean_RT) %>% pivot_wider(names_from = c(cond, prop_i, RT_size), values_from = Simon_effect)
delta_plot_table_RT %>% select(-mean_RT) %>% pivot_wider(names_from = c(cond, prop_i, RT_size), values_from = Simon_effect) -> foo
write.csv(foo, "delta_plot_data.csv")
library(ggplot2)
library(tidyverse)
library(here)
library(ggsci)
library(ggthemes)
library(rstatix)
library(ggpubr)
library(patchwork)
all_data <- read.csv("/Users/dddd1007/project2git/cognitive_control_model/data/input/all_data_with_RL_BL_estimate_result.csv")
rl_model_param_sets <- read.csv("/Users/dddd1007/project2git/cognitive_control_model/data/output/rl_model_estimate_by_stim/rl_sr_sep_alpha_volatility_param_set.csv")
head(all_data)
head(rl_model_param_sets)
plot_data <- data.frame(
subject = all_data$Subject_num,
trials = all_data$Trial,
prop = all_data$prop * 0.01,
condition = all_data$condition,
RT = all_data$RT,
rl_p_ll_rr = (all_data$rl_sr_v_ll + all_data$rl_sr_v_rr) / 2,
bl_p_ll_rr = (all_data$bl_sr_ll + all_data$bl_sr_rr) / 2,
bl_p = all_data$bl_sr_r_selected,
rl_p = all_data$rl_sr_p_selected
)
subject_list <- unique(plot_data$subject)
added_condition_data <- list()
count_num <- 1
for (i in subject_list) {
tmp_data <- filter(plot_data, subject == i)
exp_condition <- paste(tmp_data$prop[1], tmp_data$condition[1], sep = "_")
added_condition_data[[count_num]] <- cbind(tmp_data,
exp_condition = exp_condition)
count_num <- count_num + 1
}
plot_data <- bind_rows(added_condition_data, .id = "column_label")
# For bayesian learner data
##
# Step 1 : Making a ttest to compare the v under volatile / stable condition
# Step 2 : Plot the mean of v under each condition for every subjects
# get the mean of each sub under each conditions
bl_v_condition_sep <- select(all_data, "Subject_num", "condition", "bl_sr_v") %>%
group_by(Subject_num, condition) %>%
summarise(v_mean = mean(bl_sr_v), .groups = 'drop')
bl_v_condition_sep$condition <- factor(bl_v_condition_sep$condition)
paired_plot_data <- pivot_wider(bl_v_condition_sep,
names_from = "condition", values_from = "v_mean")
get_summary_stats(paired_plot_data, type = "common")
print("=== TTEST RESULT ===")
bl_v_ttest <- select(all_data, "Subject_num", "condition", "bl_sr_v") %>%
group_by(Subject_num, condition) %>%
summarise(v_mean = mean(bl_sr_v), .groups = 'drop') %>%
t_test(v_mean~condition, paired = TRUE)
select(all_data, "Subject_num", "condition", "bl_sr_v") %>%
group_by(Subject_num, condition) %>%
summarise(v_mean = mean(bl_sr_v), .groups = 'drop') %>%
cohens_d(v_mean~condition, paired = TRUE)
bl_v_plot <- ggpaired(paired_plot_data, cond1 = "s", cond2 = "v", color = "condition",
line.color = "gray", line.size = 0.3, ylab = "v means",
ylim = c(-5.7, -4.4)) + stat_pvalue_manual(bl_v_ttest, label = "p", y.position = -4.4)
bl_v_plot
library(car)
RA_RT_anova <- data_without_outlier %>%
group_by(Subject_num, congruency, prop, condition) %>%
summarise(mean_rt = mean(RT)) %>%
as_tibble()
RA_RT_anova %>%
pivot_wider(names_from = c(condition, prop, congruency), values_from = mean_rt) -> foo
mod <- Anova(lm(mean_rt ~ congruency * prop * condition, data = RA_RT_anova), type = 3)
heplots::etasq(mod, anova = TRUE)
library(car)
RA_RT_anova <- data_without_outlier %>%
group_by(Subject_num, congruency, prop, condition) %>%
summarise(mean_rt = mean(RT)) %>%
as_tibble()
RA_RT_anova %>%
pivot_wider(names_from = c(condition, prop, congruency), values_from = mean_rt) -> foo
mod <- Anova(lm(mean_rt ~ congruency * prop * condition, data = RA_RT_anova), type = 3)
mod
RA_RT_anova %>%
anova_test(dv = mean_rt, wid = Subject_num,
within = c(congruency, prop, condition)) %>%
get_anova_table() -> RT_anova_table
RT_anova_table
print("== Describe data ==")
RA_RT_anova %>%
group_by(congruency) %>%
summarise(mean_RT = mean(mean_rt))
RA_RT_anova %>%
group_by(prop) %>%
summarise(mean_RT = mean(mean_rt))
library(car)
RA_RT_anova <- data_without_outlier %>%
group_by(Subject_num, congruency, prop, condition) %>%
summarise(mean_rt = mean(RT)) %>%
as_tibble()
RA_RT_anova %>%
pivot_wider(names_from = c(condition, prop, congruency), values_from = mean_rt) -> foo
mod <- Anova(lm(mean_rt ~ factor(congruency) * factor(prop) * factor(condition),
data = RA_RT_anova), type = 3)
mod
RA_RT_anova %>%
anova_test(dv = mean_rt, wid = Subject_num,
within = c(congruency, prop, condition)) %>%
get_anova_table() -> RT_anova_table
RT_anova_table
print("== Describe data ==")
RA_RT_anova %>%
group_by(congruency) %>%
summarise(mean_RT = mean(mean_rt))
RA_RT_anova %>%
group_by(prop) %>%
summarise(mean_RT = mean(mean_rt))
ggplot(all_data) +
stat_smooth(aes(x = bl_sr_PE, y = RT, color = congruency)) +
theme_pubr() +
xlab("Prediction error of S-R") + ylab("RTs")
ggplot(all_data) +
stat_smooth(aes(x = rl_sr_pe, y = RT, color = congruency)) +
theme_pubr() +
xlab("Prediction error of S-R") + ylab("RTs")
ggplot(all_data) +
stat_smooth(aes(x = bl_sr_PE, y = RT, color = congruency)) +
theme_pubr() +
xlab("Prediction error of S-R") + ylab("RTs")
ggplot(all_data) +
stat_smooth(aes(x = rl_sr_v_pe, y = RT, color = congruency)) +
theme_pubr() +
xlab("Prediction error of S-R") + ylab("RTs")
# correlation
bl_list <- list()
rl_list <- list()
subject_list <- unique(raw_data$Subject_num)
count <- 1
for (single_sub in subject_list) {
single_sub_data <- filter(raw_data, Subject_num == single_sub)
bl_list[count] <- cor(single_sub_data$RT, single_sub_data$bl_sr_PE)
rl_list[count] <- cor(single_sub_data$RT, single_sub_data$rl_sr_v_pe)
count <- count + 1
}
bl_cor <- unlist(bl_list)
rl_cor <- unlist(rl_list)
tibble(BL = bl_cor, RL = rl_cor) %>%
tidyr::pivot_longer(cols = c(BL, RL), names_to = "Type", values_to = "cor") %>%
ggboxplot(x = "Type", y = "cor", fill = "Type", add = "jitter", ylab = "Pearson's r") -> corrplot
ggsave(here("data", "output", "plot", "corrplot.png"), corrplot, width = 4, height = 6)
# linear regression
summary(lm(RT ~ bl_sr_PE + Response + congruency + run + block - 1, data = data_without_outlier))
summary(lm(RT ~ rl_sr_v_pe + Response + congruency + run + block - 1, data = data_without_outlier))
# linear regression for each sub
bl_result_list <- list()
rl_result_list <- list()
count_num <- 1
for (i in unique(data_without_outlier$Subject_num)) {
single_sub_data <- filter(data_without_outlier, Subject_num == i)
bl_result_list[[count_num]] <-
coef(lm(RT ~ bl_sr_PE + Response + congruency + run + block - 1,
data = single_sub_data))[[1]]
rl_result_list[[count_num]] <-
coef(lm(RT ~ rl_sr_v_pe + Response + congruency + run + block - 1,
data = single_sub_data))[[1]]
count_num <- count_num + 1
}
print("== T Test == ")
t.test(x = unlist(bl_result_list),
y = unlist(rl_result_list),
alternative = "greater", paired = TRUE) %>%
t_apa()
t.test(x = unlist(bl_result_list),
y = unlist(rl_result_list),
alternative = "greater", paired = TRUE)
library()
summary(unlist(bl_result_list))
summary(unlist(rl_result_list))
RA_confint <- data.frame(BL = unlist(bl_result_list),
RL = unlist(rl_result_list))
bl.model <- lm(BL ~ 1, RA_confint)
confint(bl.model, level=0.95)
rl.model <- lm(RL ~ 1, RA_confint)
confint(rl.model, level=0.95)
print("== End T Test ==")
RA_boxplot_PE_to_Beh <- data.frame(coef_value = c(unlist(bl_result_list),
unlist(rl_result_list)),
model_type = c(rep("Bayesian Learner",
length(bl_result_list)),
rep("Reinforcement Learning",
length(rl_result_list))))
# Plot for regression result
ggplot(RA_boxplot_PE_to_Beh) +
geom_boxplot(aes(x = model_type,
y = coef_value,
fill = model_type)) +
geom_dotplot(aes(x = model_type, y = coef_value),
binaxis='y',
stackdir='center',
alpha = 0.3) +
theme_pubr() +
guides(fill=guide_legend("Model")) +
labs(x = "Model Type", y = "Beta of regression") -> boxplot_PE_reg
boxplot_PE_reg
data_without_outlier %>%
select(Subject_num, RT, bl_sr_PE, rl_sr_v_pe) %>%
mutate(bin = cut(RT, breaks = seq(100,1600,200))) -> RA_sep_bin_analysis
RA_sep_bin_analysis %>%
group_by(bin) %>%
summarise(mean_RT = mean(RT),
mean_BL_PE = mean(bl_sr_PE),
mean_RL_PE = mean(rl_sr_v_pe)) %>%
pivot_longer(cols = ends_with("_PE"),
names_to = "Model_Type",
values_to = "PE") %>%
ggplot() +
geom_point(aes(x = mean_RT, y = PE, shape = Model_Type), size = 2) +
geom_smooth(aes(x = mean_RT, y = PE, color = Model_Type)) +
facet_grid(Model_Type ~ .,
labeller = as_labeller(c("mean_BL_PE" = "Bayesian Learner",
"mean_RL_PE" = "Reinforcement Learning"))) +
theme_pubr() + xlab("RT") +
scale_color_discrete(labels = c("Bayesian Learner", "Reinforcement Learning")) +
scale_shape_discrete(labels = c("Bayesian Learner", "Reinforcement Learning")) +
guides(color = guide_legend("Model"),
shape = guide_legend("Model")) -> smooth_PE_RT_relation
smooth_PE_RT_relation
RA_sep_bin_analysis %>%
group_by(bin) %>%
summarise(mean_RT = mean(RT),
mean_BL_PE = mean(bl_sr_PE),
mean_RL_PE = mean(rl_sr_v_pe)) %>%
pivot_longer(cols = ends_with("_PE"),
names_to = "Model_Type",
values_to = "PE")
head(data_without_outlier)
glimpse(data_without_outlier)
data_without_outlier %>%
filter(bl_sr_PE > 0.9) %>%
group_by(prop, congruency) %>%
summarise(meanRT = mean(RT))
data_without_outlier %>%
filter(bl_sr_PE > 0.9) %>%
group_by(prop, congruency) #%>%
data_without_outlier$bl_sr_PE
data_without_outlier %>%
filter(bl_sr_PE > 0.8) %>%
group_by(prop, congruency) #%>%
data_without_outlier %>%
filter(bl_sr_PE > 0.8) %>%
group_by(prop, congruency) %>%
summarise(meanRT = mean(RT))
data_without_outlier %>%
filter(bl_sr_PE > 0.8) %>%
group_by(prop, congruency) #%>%
data_without_outlier %>%
filter(bl_sr_PE > 0.8) %>%
group_by(prop, congruency)
raw_data <- read_csv("/Users/dddd1007/project2git/cognitive_control_model/data/input/all_data_with_RL_BL_estimate_result.csv")
## **按条件去掉 RT 的 outlier 和错误试次**
data_without_error <- filter(raw_data, Type == "hit")
data_without_outlier <- data_without_error %>%
group_by(Subject, congruency, prop, condition) %>%
filter(abs(RT - mean(RT)) < (sd(RT) * 3))
data_without_outlier %>%
group_by(prop, condition, congruency) %>%
summarise(meanRT = mean(RT)) -> to_mean_RT
to_mean_RT %>%
pivot_wider(names_from = congruency, values_from = meanRT) %>%
mutate(Simon = inc - con)
write.csv(data_without_outlier, "/Users/dddd1007/project2git/cognitive_control_model/data/output/summary/data_without_outlier.csv")
# 查看 PE 大的时候 con / inc 的均值
data_without_outlier %>%
filter(bl_sr_PE > 0.8) %>%
group_by(prop, congruency)
summarise(meanRT = mean(RT))
data_without_outlier %>%
filter(bl_sr_PE > 0.8) %>%
group_by(prop, congruency) %>%
summarise(meanRT = mean(RT))
# 查看 PE 大的时候 con / inc 的均值
data_without_outlier %>%
filter(bl_sr_PE > 0.6) %>%
group_by(prop, congruency) %>%
summarise(meanRT = mean(RT))
# 查看 PE 大的时候 con / inc 的均值
data_without_outlier %>%
filter(bl_sr_PE > 0.7) %>%
group_by(prop, congruency) %>%
summarise(meanRT = mean(RT)) %>%
cbind(PE = 0.6)
# 查看 PE 大的时候 con / inc 的均值
data_without_outlier %>%
filter(bl_sr_PE > 0.6) %>%
group_by(prop, congruency) %>%
summarise(meanRT = mean(RT)) %>%
cbind(PE = 0.6)
# 查看 PE 大的时候 con / inc 的均值
data_without_outlier %>%
filter(bl_sr_PE > 0.6) %>%
group_by(prop, congruency) %>%
summarise(meanRT = mean(RT)) %>%
cbind(PE = 0.6) -> foo
data_without_outlier %>%
filter(bl_sr_PE < 0.4) %>%
group_by(prop, congruency) %>%
summarise(meanRT = mean(RT)) %>%
cbind(PE = 0.4) -> bar
library(ggplot2)
library(tidyverse)
library(here)
library(ggsci)
library(ggthemes)
library(rstatix)
library(ggpubr)
library(patchwork)
all_data <- read.csv("/Users/dddd1007/project2git/cognitive_control_model/data/input/all_data_with_RL_BL_estimate_result.csv")
rl_model_param_sets <- read.csv("/Users/dddd1007/project2git/cognitive_control_model/data/output/rl_model_estimate_by_stim/rl_sr_sep_alpha_volatility_param_set.csv")
head(all_data)
head(rl_model_param_sets)
plot_data <- data.frame(
subject = all_data$Subject_num,
trials = all_data$Trial,
prop = all_data$prop * 0.01,
condition = all_data$condition,
RT = all_data$RT,
rl_p_ll_rr = (all_data$rl_sr_v_ll + all_data$rl_sr_v_rr) / 2,
bl_p_ll_rr = (all_data$bl_sr_ll + all_data$bl_sr_rr) / 2,
bl_p = all_data$bl_sr_r_selected,
rl_p = all_data$rl_sr_p_selected
)
subject_list <- unique(plot_data$subject)
added_condition_data <- list()
count_num <- 1
for (i in subject_list) {
tmp_data <- filter(plot_data, subject == i)
exp_condition <- paste(tmp_data$prop[1], tmp_data$condition[1], sep = "_")
added_condition_data[[count_num]] <- cbind(tmp_data,
exp_condition = exp_condition)
count_num <- count_num + 1
}
plot_data <- bind_rows(added_condition_data, .id = "column_label")
tmp_part1 <- plot_data %>%
select(-rl_p_ll_rr, -bl_p_ll_rr) %>%
pivot_longer(bl_p:rl_p, names_to = "model_type", values_to = "p") %>%
separate(model_type, c("model_type", NA), sep = "_")
tmp_part2 <- plot_data %>%
select(-bl_p, -rl_p) %>%
pivot_longer(bl_p_ll_rr:rl_p_ll_rr, names_to = "model_type_2",
values_to = "ll_rr") %>%
separate(model_type_2, c("model_type", NA, NA, NA), sep = "_")
plot_data <- left_join(tmp_part1, tmp_part2, by = c("subject", "trials", "model_type", "RT", "condition", "exp_condition", "prop")) %>%
select(-starts_with("column_label")) %>%
filter(exp_condition == "0.8_s" | exp_condition == "0.8_v")
plot_data %>%
filter(subject == 1) -> foo
model_estimate_plot <- ggline(data = foo, y = "ll_rr", x = "trials", color = "model_type",
plot_type = "l", size = 1,
ylab = "Probability of learning object", xlab = "Trials",
facet.by = c("exp_condition", "model_type"),
panel.labs = list(exp_condition = c("S-V", "V-S"),
model_type = c("Bayesian Learner",
"Reinforcement Learning")))
foo
model_estimate_plot <- ggline(data = foo, y = "ll_rr", x = "trials", color = "model_type",
plot_type = "l", size = 1,
ylab = "Probability of learning object", xlab = "Trials",
facet.by = c("exp_condition", "model_type"),
panel.labs = list(exp_condition = c("S-V", "V-S"),
model_type = c("Bayesian Learner",
"Reinforcement Learning")))
model_estimate_plot <-
ggline(data = foo, y = "ll_rr", x = "trials", color = "model_type",
plot_type = "l", size = 1,
ylab = "Probability of learning object", xlab = "Trials",
facet.by = c("exp_condition", "model_type"),
panel.labs = list(exp_condition = c("S-V", "V-S"),
model_type = c("Bayesian Learner",
"Reinforcement Learning")))
plot_data %>%
filter(subject == 11) -> foo
plot_data %>%
filter(subject == 11) -> foo
```{r}
foo
model_estimate_plot <-
ggline(data = foo, y = "ll_rr", x = "trials", color = "model_type",
plot_type = "l", size = 1,
ylab = "Probability of learning object", xlab = "Trials",
facet.by = c("exp_condition", "model_type"),
panel.labs = list(exp_condition = c("S-V", "V-S"),
model_type = c("Bayesian Learner",
"Reinforcement Learning")))
foo
head(all_data)
all_data %>%
filter(Subject_num == 1) %>%
ggplot(aes(x = 1:nrow(.), y = bl_sr_ll)) +
geom_line()
all_data %>%
filter(Subject_num == 1) %>%
ggplot(aes(x = 1:nrow(.), y = point)) +
geom_line()
all_data %>%
filter(Subject_num == 1) %>%
ggplot(aes(x = 1:nrow(.), y = bl_sr_ll)) +
geom_point()
all_data %>%
filter(Subject_num == 1) %>%
ggplot(aes(x = 1:nrow(.), y = bl_ab_r_con)) +
geom_point()
all_data %>%
filter(Subject_num == 1) %>%
ggplot(aes(x = 1:nrow(.), y = bl_sr_ll)) +
geom_point()
all_data %>%
filter(Subject_num == 1) %>%
ggplot(aes(x = 1:nrow(.), y = bl_sr_ll)) +
geom_line() + theme_pubr()
