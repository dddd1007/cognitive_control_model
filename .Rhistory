y = unlist(rl_result_list),
alternative = "greater", paired = TRUE) %>%
t_apa()
t.test(x = unlist(bl_result_list),
y = unlist(rl_result_list),
alternative = "greater", paired = TRUE)
print("== End T Test ==")
RA_boxplot_PE_to_Beh <- data.frame(coef_value = c(unlist(bl_result_list),
unlist(rl_result_list)),
model_type = c(rep("Bayesian Learner",
length(bl_result_list)),
rep("Reinforcement Learning",
length(rl_result_list))))
# linear regression
summary(lm(RT ~ bl_sr_PE + Response + congruency + run + block - 1, data = data_without_outlier))
summary(lm(RT ~ rl_sr_v_pe + Response + congruency + run + block - 1, data = data_without_outlier))
# linear regression for each sub
bl_result_list <- list()
rl_result_list <- list()
count_num <- 1
for (i in unique(data_without_outlier$Subject_num)) {
single_sub_data <- filter(data_without_outlier, Subject_num == i)
bl_result_list[[count_num]] <-
coef(lm(RT ~ bl_sr_PE + Response + congruency + run + block - 1,
data = single_sub_data))[[1]]
rl_result_list[[count_num]] <-
coef(lm(RT ~ rl_sr_v_pe + Response + congruency + run + block - 1,
data = single_sub_data))[[1]]
count_num <- count_num + 1
}
print("== T Test == ")
t.test(x = unlist(bl_result_list),
y = unlist(rl_result_list),
alternative = "greater", paired = TRUE) %>%
t_apa()
t.test(x = unlist(bl_result_list),
y = unlist(rl_result_list),
alternative = "greater", paired = TRUE)
summary(unlist(bl_result_list))
summary(unlist(rl_result_list))
print("== End T Test ==")
RA_boxplot_PE_to_Beh <- data.frame(coef_value = c(unlist(bl_result_list),
unlist(rl_result_list)),
model_type = c(rep("Bayesian Learner",
length(bl_result_list)),
rep("Reinforcement Learning",
length(rl_result_list))))
# linear regression
summary(lm(RT ~ bl_sr_PE + Response + congruency + run + block - 1, data = data_without_outlier))
summary(lm(RT ~ rl_sr_v_pe + Response + congruency + run + block - 1, data = data_without_outlier))
# linear regression for each sub
bl_result_list <- list()
rl_result_list <- list()
count_num <- 1
for (i in unique(data_without_outlier$Subject_num)) {
single_sub_data <- filter(data_without_outlier, Subject_num == i)
bl_result_list[[count_num]] <-
coef(lm(RT ~ bl_sr_PE + Response + congruency + run + block - 1,
data = single_sub_data))[[1]]
rl_result_list[[count_num]] <-
coef(lm(RT ~ rl_sr_v_pe + Response + congruency + run + block - 1,
data = single_sub_data))[[1]]
count_num <- count_num + 1
}
print("== T Test == ")
t.test(x = unlist(bl_result_list),
y = unlist(rl_result_list),
alternative = "greater", paired = TRUE) %>%
t_apa()
t.test(x = unlist(bl_result_list),
y = unlist(rl_result_list),
alternative = "greater", paired = TRUE)
library()
summary(unlist(bl_result_list))
summary(unlist(rl_result_list))
RA_confint <- data.frame(BL = unlist(bl_result_list),
RL = unlist(rl_result_list))
bl.model <- lm(BL ~ 1, RA_confint)
confint(bl.model, level=0.95)
rl.model <- lm(RL ~ 1, RA_confint)
confint(rl.model, level=0.95)
print("== End T Test ==")
RA_boxplot_PE_to_Beh <- data.frame(coef_value = c(unlist(bl_result_list),
unlist(rl_result_list)),
model_type = c(rep("Bayesian Learner",
length(bl_result_list)),
rep("Reinforcement Learning",
length(rl_result_list))))
library(tidyverse)
library(apa)
library(here)
library(ggplot2)
library(rstatix)
library(ggpubr)
library(patchwork)
library(gghalves)
?get_anova_table
library(tidyverse)
library(apa)
library(here)
library(ggplot2)
library(rstatix)
library(ggpubr)
library(patchwork)
library(gghalves)
raw_data <- read_csv("/Users/dddd1007/project2git/cognitive_control_model/data/input/all_data_with_RL_BL_estimate_result.csv")
data_without_error <- filter(raw_data, Type == "hit")
data_without_outlier <- data_without_error %>%
group_by(Subject, congruency, prop, condition) %>%
filter(abs(RT - mean(RT)) < (sd(RT) * 3))
data_foranalysis <- data_without_outlier %>%
group_by(Subject_num, congruency, prop, condition) %>%
summarise(mean_rt = mean(RT)) %>%
as_tibble()
data_foranalysis %>%
anova_test(dv = mean_rt, wid = Subject_num,
within = c(congruency, prop, condition)) %>%
get_anova_table()
install.packages("psych")
data_foranalysis <- data_without_outlier %>%
group_by(Subject_num, congruency, prop, condition) %>%
summarise(mean_rt = mean(RT)) %>%
as_tibble()
data_foranalysis %>%
anova_test(dv = mean_rt, wid = Subject_num,
within = c(congruency, prop, condition)) %>%
get_anova_table()
print("== Describe data ==")
psych::describe(data_foranalysis)
RA_RT_anova <- data_without_outlier %>%
group_by(Subject_num, congruency, prop, condition) %>%
summarise(mean_rt = mean(RT)) %>%
as_tibble()
RA_RT_anova %>%
anova_test(dv = mean_rt, wid = Subject_num,
within = c(congruency, prop, condition)) %>%
get_anova_table()
print("== Describe data ==")
psych::describe(RA_RT_anova)
library(psych)
?describe.by
RA_RT_anova <- data_without_outlier %>%
group_by(Subject_num, congruency, prop, condition) %>%
summarise(mean_rt = mean(RT)) %>%
as_tibble()
RA_RT_anova %>%
anova_test(dv = mean_rt, wid = Subject_num,
within = c(congruency, prop, condition)) %>%
get_anova_table()
print("== Describe data ==")
psych::describeBy(RA_RT_anova, RA_RT_anova$congruency)
psych::describeBy(RA_RT_anova, RA_RT_anova$prop)
RA_RT_anova <- data_without_outlier %>%
group_by(Subject_num, congruency, prop, condition) %>%
summarise(mean_rt = mean(RT)) %>%
as_tibble()
RA_RT_anova %>%
anova_test(dv = mean_rt, wid = Subject_num,
within = c(congruency, prop, condition)) %>%
get_anova_table()
print("== Describe data ==")
RA_RT_anova %>%
group_by(congruency) %>%
summarise(mean_RT = mean(RT))
RA_RT_anova
RA_RT_anova <- data_without_outlier %>%
group_by(Subject_num, congruency, prop, condition) %>%
summarise(mean_rt = mean(RT)) %>%
as_tibble()
RA_RT_anova %>%
anova_test(dv = mean_rt, wid = Subject_num,
within = c(congruency, prop, condition)) %>%
get_anova_table()
print("== Describe data ==")
RA_RT_anova %>%
group_by(congruency) %>%
summarise(mean_RT = mean(mean_rt))
RA_RT_anova %>%
group_by(prop) %>%
summarise(mean_RT = mean(mean_rt))
data_without_outlier %>%
filter(prop == 80) %>%
group_by(Subject_num, congruency) %>%
summarise(mean_rt = mean(RT), .groups = "drop") %>%
pivot_wider(names_from = "congruency",
values_from = "mean_rt") -> foo1
get_summary_stats(foo1)
t.test(x = foo1$con, y = foo1$inc, alternative = "less", paired = TRUE) %>% t_apa()
data_without_outlier %>%
filter(prop == 20) %>%
group_by(Subject_num, congruency) %>%
summarise(mean_rt = mean(RT), .groups = "drop") %>%
pivot_wider(names_from = "congruency",
values_from = "mean_rt") -> foo2
get_summary_stats(foo2)
t.test(x = foo2$con, y = foo2$inc, alternative = "greater", paired = TRUE) %>% t_apa()
install.packages("broom")
RA_RT_anova <- data_without_outlier %>%
group_by(Subject_num, congruency, prop, condition) %>%
summarise(mean_rt = mean(RT)) %>%
as_tibble()
RA_RT_anova %>%
anova_test(dv = mean_rt, wid = Subject_num,
within = c(congruency, prop, condition)) %>%
get_anova_table()
print("== Describe data ==")
RA_RT_anova %>%
group_by(congruency) %>%
summarise(mean_RT = mean(mean_rt))
RA_RT_anova %>%
group_by(prop) %>%
summarise(mean_RT = mean(mean_rt))
data_without_outlier %>%
filter(prop == 80) %>%
group_by(Subject_num, congruency) %>%
summarise(mean_rt = mean(RT), .groups = "drop") %>%
pivot_wider(names_from = "congruency",
values_from = "mean_rt") -> foo1
get_summary_stats(foo1)
t.test(x = foo1$con, y = foo1$inc, alternative = "less", paired = TRUE) %>% t_apa()
data_without_outlier %>%
filter(prop == 20) %>%
group_by(Subject_num, congruency) %>%
summarise(mean_rt = mean(RT), .groups = "drop") %>%
pivot_wider(names_from = "congruency",
values_from = "mean_rt") -> foo2
get_summary_stats(foo2)
t.test(x = foo2$con, y = foo2$inc, alternative = "greater", paired = TRUE) %>% t_apa()
raw_data %>%
mutate(correct_action = if_else(.data$Type == "hit", 1, 0)) %>%
group_by(Subject_num, congruency, prop, condition) %>%
summarise(mean_error_action = (1 - mean(correct_action)) * 100, .groups = "drop") %>%
anova_test(dv = mean_error_action, wid = Subject_num,
within = c(congruency, prop, condition))
install.packages("devtools")
devtools::install_github("dstanley4/apaTables")
install.packages("flextable")
library(tidyverse)
tidyverse::tidyverse_update()
install.packages(c("haven", "httr", "MASS", "nloptr"))
r
library(tidyverse)
library(bloom)
install.packages("bloom")
library(tidyverse)
library(broom)
library(flextable)
library(apa)
library(here)
library(ggplot2)
library(rstatix)
library(ggpubr)
library(patchwork)
library(gghalves)
raw_data <- read_csv("/Users/dddd1007/project2git/cognitive_control_model/data/input/all_data_with_RL_BL_estimate_result.csv")
data_without_error <- filter(raw_data, Type == "hit")
data_without_outlier <- data_without_error %>%
group_by(Subject, congruency, prop, condition) %>%
filter(abs(RT - mean(RT)) < (sd(RT) * 3))
RA_RT_anova <- data_without_outlier %>%
group_by(Subject_num, congruency, prop, condition) %>%
summarise(mean_rt = mean(RT)) %>%
as_tibble()
RA_RT_anova %>%
anova_test(dv = mean_rt, wid = Subject_num,
within = c(congruency, prop, condition)) %>%
get_anova_table() -> RT_anova_table
RT_anova_table
print("== Describe data ==")
RA_RT_anova %>%
group_by(congruency) %>%
summarise(mean_RT = mean(mean_rt))
RA_RT_anova %>%
group_by(prop) %>%
summarise(mean_RT = mean(mean_rt))
library(tidyverse)
library(broom)
library(flextable)
library(apa)
library(here)
library(ggplot2)
library(rstatix)
library(ggpubr)
library(patchwork)
library(gghalves)
raw_data <- read_csv("/Users/dddd1007/project2git/cognitive_control_model/data/input/all_data_with_RL_BL_estimate_result.csv")
data_without_error <- filter(raw_data, Type == "hit")
data_without_outlier <- data_without_error %>%
group_by(Subject, congruency, prop, condition) %>%
filter(abs(RT - mean(RT)) < (sd(RT) * 3))
RA_RT_anova <- data_without_outlier %>%
group_by(Subject_num, congruency, prop, condition) %>%
summarise(mean_rt = mean(RT)) %>%
as_tibble()
RA_RT_anova %>%
anova_test(dv = mean_rt, wid = Subject_num,
within = c(congruency, prop, condition)) %>%
get_anova_table() -> RT_anova_table
RT_anova_table
print("== Describe data ==")
RA_RT_anova %>%
group_by(congruency) %>%
summarise(mean_RT = mean(mean_rt))
RA_RT_anova %>%
group_by(prop) %>%
summarise(mean_RT = mean(mean_rt))
# anova_RT_plot <- ggboxplot(RA_RT_anova,
#           x = "congruency", y = "mean_rt",
#           fill = "condition", ylab = "RT (ms)",
#           font.label = list(size = 14)) %>%
#           facet(facet.by = "prop")
# anova_RT_plot
# ggsave(here("data", "output", "plot",
#             "anova_RT_plot.png"),
#         plot = anova_RT_plot,
#         dpi = 300, scale = 0.65)
#
data_forplot <- unite(RA_RT_anova, col = "factor",
congruency, condition, sep = "/", remove = FALSE)
data_forplot$factor <- as.factor(data_forplot$factor)
anova_RT_plot_bar <- ggbarplot(data_forplot,
x = "factor", y = "mean_rt",
fill = "condition", color = "condition",
add = "mean_se",
facet.by = "prop",
ylab = "RT (ms)", ylim = c(420, 550),
add.params = list(color = "black"),
font.label = list(size = 14))
anova_RT_plot_bar
data_without_outlier %>%
filter(prop == 80) %>%
group_by(Subject_num, congruency) %>%
summarise(mean_rt = mean(RT), .groups = "drop") %>%
pivot_wider(names_from = "congruency",
values_from = "mean_rt") -> foo1
get_summary_stats(foo1)
t.test(x = foo1$con, y = foo1$inc, alternative = "less", paired = TRUE) %>% t_apa()
data_without_outlier %>%
filter(prop == 20) %>%
group_by(Subject_num, congruency) %>%
summarise(mean_rt = mean(RT), .groups = "drop") %>%
pivot_wider(names_from = "congruency",
values_from = "mean_rt") -> foo2
get_summary_stats(foo2)
t.test(x = foo2$con, y = foo2$inc, alternative = "greater", paired = TRUE) %>% t_apa()
raw_data %>%
mutate(correct_action = if_else(.data$Type == "hit", 1, 0)) %>%
group_by(Subject_num, congruency, prop, condition) %>%
summarise(mean_error_action = (1 - mean(correct_action)) * 100, .groups = "drop") %>%
anova_test(dv = mean_error_action, wid = Subject_num,
within = c(congruency, prop, condition))
raw_data %>%
mutate(correct_action = if_else(.data$Type == "hit", 1, 0)) %>%
group_by(Subject_num, congruency, prop, condition) %>%
summarise(mean_error_action = (1 - mean(correct_action)) * 100, .groups = "drop") %>%
anova_test(dv = mean_error_action, wid = Subject_num,
within = c(congruency, prop, condition)) -> error_rate_anova_table
error_rate_anova_table
raw_data %>%
mutate(correct_action = if_else(.data$Type == "hit", 1, 0)) %>%
group_by(Subject_num, congruency, prop, condition) %>%
summarise(mean_error_action = (1 - mean(correct_action)) * 100, .groups = "drop") %>%
anova_test(dv = mean_error_action, wid = Subject_num,
within = c(congruency, prop, condition)) -> error_rate_anova_table
error_rate_anova_table
#output anova result
save_as_docx("RT" = RT_anova_table, "error_rate" = error_rate_anova_table,
path = here("data", "output", "plot", "anova_table.docx"))
flextable(RT_anova_table)
raw_data %>%
mutate(correct_action = if_else(.data$Type == "hit", 1, 0)) %>%
group_by(Subject_num, congruency, prop, condition) %>%
summarise(mean_error_action = (1 - mean(correct_action)) * 100, .groups = "drop") %>%
anova_test(dv = mean_error_action, wid = Subject_num,
within = c(congruency, prop, condition)) -> error_rate_anova_table
error_rate_anova_table
#output anova result
save_as_docx("RT" = flextable(RT_anova_table),
"error_rate" = flextable(error_rate_anova_table),
path = here("data", "output", "plot", "anova_table.docx"))
flextable(RT_anova_table, digits = 3,)
flextable(RT_anova_table, digits = 3)
?flextable
raw_data %>%
mutate(correct_action = if_else(.data$Type == "hit", 1, 0)) %>%
group_by(Subject_num, congruency, prop, condition) %>%
summarise(mean_error_action = (1 - mean(correct_action)) * 100, .groups = "drop") %>%
anova_test(dv = mean_error_action, wid = Subject_num,
within = c(congruency, prop, condition)) -> error_rate_anova_table
error_rate_anova_table
#output anova result
set_flextable_defaults(digits = 3)
save_as_docx("RT" = flextable(RT_anova_table),
"error_rate" = flextable(error_rate_anova_table),
path = here("data", "output", "plot", "anova_table.docx"))
set_flextable_defaults(digits = 3)
flextable(RT_anova_table)
?flextable
get_flextable_defaults()
raw_data %>%
mutate(correct_action = if_else(.data$Type == "hit", 1, 0)) %>%
group_by(Subject_num, congruency, prop, condition) %>%
summarise(mean_error_action = (1 - mean(correct_action)) * 100, .groups = "drop") %>%
anova_test(dv = mean_error_action, wid = Subject_num,
within = c(congruency, prop, condition)) -> error_rate_anova_table
error_rate_anova_table
#output anova result
set_flextable_defaults(digits = 3)
save_as_docx("RT" = flextable(RT_anova_table),
"error_rate" = flextable(error_rate_anova_table),
path = here("data", "output", "plot", "anova_table.docx"))
library(cmdstanr)
library(posterior)
library(bayesplot)
library(tidyverse)
check_cmdstan_toolchain()
library(cmdstanr)
library(posterior)
library(bayesplot)
library(tidyverse)
check_cmdstan_toolchain()
sr_1k1v_stanfile <- "/Users/dddd1007/project2git/cognitive_control_model/Models/stan_src/Bayesian_Models/bayesian_learner_sr_1k1v_neg_v.stan"
sr_1k1v_learner <- cmdstan_model(sr_1k1v_stanfile)
output_dir_1k1v <- "/Users/dddd1007/project2git/cognitive_control_model/data/output/bayesian_learner_samplers/1k1v_neg_v/"
#####
library(cmdstanr)
library(posterior)
library(bayesplot)
library(tidyverse)
check_cmdstan_toolchain()
sr_1k1v_stanfile <- "/Users/dddd1007/project2git/cognitive_control_model/Models/stan_src/Bayesian_Models/bayesian_learner_sr_1k1v_neg_v.stan"
sr_1k1v_learner <- cmdstan_model(sr_1k1v_stanfile)
output_dir_1k1v <- "/Users/dddd1007/project2git/cognitive_control_model/data/output/bayesian_learner_samplers/1k1v_neg_v/"
sr_1k1v_stanfile <- "/Users/dddd1007/project2git/cognitive_control_model/Models/stan_src/Bayesian_Models/bayesian_learner_sr_1k1v_neg_v.stan"
sr_1k1v_learner <- cmdstan_model(sr_1k1v_stanfile)
output_dir_1k1v <- "/Users/dddd1007/project2git/cognitive_control_model/data/output/bayesian_learner_samplers/1k1v_neg_v/"
# Load data
raw_data <- read.csv("/Users/dddd1007/project2git/cognitive_control_model/data/input/all_data_with_RL_BL_estimate_result.csv")
# Estimate each sub
sub_num_list <- unique(raw_data$Subject_num)
for (i in sub_num_list) {
single_sub_table <- filter(raw_data, Subject_num == i)
N <- nrow(single_sub_table)
corr_react <- single_sub_table$correct_action
space_loc <- single_sub_table$stim_loc_num
data_list <- list(N = N, corr_react = corr_react, space_loc = space_loc)
# model1 1k1v
file_save_path_1k1v <- paste0(output_dir_1k1v, "sub_", as.character(i))
dir.create(file_save_path_1k1v)
fit1 <- sr_1k1v_learner$sample(
data = data_list,
chains = 4,
parallel_chains = 4,
refresh = 500,
output_dir = file_save_path_1k1v
)
}
# Load data
raw_data <- read.csv("/Users/dddd1007/project2git/cognitive_control_model/data/input/all_data_with_I_hats.csv")
# Estimate each sub
sub_num_list <- unique(raw_data$Subject_num)
for (i in sub_num_list) {
single_sub_table <- filter(raw_data, Subject_num == i)
N <- nrow(single_sub_table)
corr_react <- single_sub_table$correct_action
space_loc <- single_sub_table$stim_loc_num
data_list <- list(N = N, corr_react = corr_react, space_loc = space_loc)
# model1 1k1v
file_save_path_1k1v <- paste0(output_dir_1k1v, "sub_", as.character(i))
dir.create(file_save_path_1k1v)
fit1 <- sr_1k1v_learner$sample(
data = data_list,
chains = 4,
parallel_chains = 4,
refresh = 500,
output_dir = file_save_path_1k1v
)
}
library(cmdstanr)
library(posterior)
library(bayesplot)
library(tidyverse)
check_cmdstan_toolchain()
sr_1k1v_stanfile <- "/Users/dddd1007/project2git/cognitive_control_model/Models/stan_src/Bayesian_Models/bayesian_learner_sr_1k1v_neg_v.stan"
sr_1k1v_learner <- cmdstan_model(sr_1k1v_stanfile)
output_dir_1k1v <- "/Users/dddd1007/project2git/cognitive_control_model/data/output/bayesian_learner_samplers/1k1v_neg_v/"
#####
##### Estimate Model
#####
# Load data
raw_data <- read.csv("/Users/dddd1007/project2git/cognitive_control_model/data/input/all_data_with_I_hats.csv")
# Estimate each sub
sub_num_list <- unique(raw_data$Subject_num)
for (i in sub_num_list) {
if (i < 8) {next}
print(paste0("==== Begin Subject ", as.character(i), " ====="))
single_sub_table <- filter(raw_data, Subject_num == i)
N <- nrow(single_sub_table)
corr_react <- single_sub_table$correct_action
space_loc <- single_sub_table$stim_loc_num
data_list <- list(N = N, corr_react = corr_react, space_loc = space_loc)
# model1 1k1v
file_save_path_1k1v <- paste0(output_dir_1k1v, "sub_", as.character(i))
dir.create(file_save_path_1k1v)
fit1 <- sr_1k1v_learner$sample(
data = data_list,
chains = 4,
parallel_chains = 4,
refresh = 500,
output_dir = file_save_path_1k1v
)
}
