length = length(subject_list)
)
# for (i in seq_len(length(subject_list))) {
i = 1
tmp_data <- dummy_columns(
filter(
bl_rl_data_miniblock,
subject == i
),
"mini_block"
) %>%
select(-mini_block)
bl_ab_data <- select(tmp_data, RT, bl_ab, starts_with("mini_block"))
model_bl_ab <- lm(RT ~ . -1, data = bl_ab_data)
bl_sr_data <- select(tmp_data, RT, bl_sr, starts_with("mini_block"))
model_bl_sr <- lm(RT ~ . -1, data = bl_sr_data)
rl_ab_data <- select(tmp_data, RT, rl_ab, starts_with("mini_block"))
model_rl_ab <- lm(RT ~ . -1, data = rl_ab_data)
rl_sr_data <- select(tmp_data, RT, rl_sr, starts_with("mini_block"))
model_rl_sr <- lm(RT ~ . -1, data = rl_sr_data)
rl_sr_decay_data <- select(tmp_data, RT, rl_sr_decay, starts_with("mini_block"))
model_rl_sr_decay <- lm(RT ~ . -1, data = rl_sr_decay_data)
bl_ab_result_AIC[i] <- AIC(model_bl_ab)
bl_sr_result_AIC[i] <- AIC(model_bl_sr)
rl_ab_result_AIC[i] <- AIC(model_rl_ab)
rl_sr_result_AIC[i] <- AIC(model_rl_sr)
rl_sr_decay_result_AIC[i] <- AIC(model_rl_sr_decay)
}
rl_ab_result_AIC <- vector(
mode = "numeric",
length = length(subject_list)
)
rl_sr_result_AIC <- vector(
mode = "numeric",
length = length(subject_list)
)
rl_sr_decay_result_AIC <- vector(
mode = "numeric",
length = length(subject_list)
)
bl_ab_result_AIC <- vector(
mode = "numeric",
length = length(subject_list)
)
bl_sr_result_AIC <- vector(
mode = "numeric",
length = length(subject_list)
)
for (i in seq_len(length(subject_list))) {
tmp_data <- dummy_columns(
filter(
bl_rl_data_miniblock,
subject == i
),
"mini_block"
) %>%
select(-mini_block)
bl_ab_data <- select(tmp_data, RT, bl_ab, starts_with("mini_block"))
model_bl_ab <- lm(RT ~ . -1, data = bl_ab_data)
bl_sr_data <- select(tmp_data, RT, bl_sr, starts_with("mini_block"))
model_bl_sr <- lm(RT ~ . -1, data = bl_sr_data)
rl_ab_data <- select(tmp_data, RT, rl_ab, starts_with("mini_block"))
model_rl_ab <- lm(RT ~ . -1, data = rl_ab_data)
rl_sr_data <- select(tmp_data, RT, rl_sr, starts_with("mini_block"))
model_rl_sr <- lm(RT ~ . -1, data = rl_sr_data)
rl_sr_decay_data <- select(tmp_data, RT, rl_sr_decay, starts_with("mini_block"))
model_rl_sr_decay <- lm(RT ~ . -1, data = rl_sr_decay_data)
bl_ab_result_AIC[i] <- AIC(model_bl_ab)
bl_sr_result_AIC[i] <- AIC(model_bl_sr)
rl_ab_result_AIC[i] <- AIC(model_rl_ab)
rl_sr_result_AIC[i] <- AIC(model_rl_sr)
rl_sr_decay_result_AIC[i] <- AIC(model_rl_sr_decay)
}
rl_ab_result_AIC <- vector(
mode = "numeric",
length = length(subject_list)
)
rl_sr_result_AIC <- vector(
mode = "numeric",
length = length(subject_list)
)
rl_sr_decay_result_AIC <- vector(
mode = "numeric",
length = length(subject_list)
)
bl_ab_result_AIC <- vector(
mode = "numeric",
length = length(subject_list)
)
bl_sr_result_AIC <- vector(
mode = "numeric",
length = length(subject_list)
)
for (i in seq_len(length(subject_list))) {
tmp_data <- dummy_columns(
filter(
bl_rl_data_miniblock,
subject == subject_list[i]
),
"mini_block"
) %>%
select(-mini_block)
bl_ab_data <- select(tmp_data, RT, bl_ab, starts_with("mini_block"))
model_bl_ab <- lm(RT ~ . -1, data = bl_ab_data)
bl_sr_data <- select(tmp_data, RT, bl_sr, starts_with("mini_block"))
model_bl_sr <- lm(RT ~ . -1, data = bl_sr_data)
rl_ab_data <- select(tmp_data, RT, rl_ab, starts_with("mini_block"))
model_rl_ab <- lm(RT ~ . -1, data = rl_ab_data)
rl_sr_data <- select(tmp_data, RT, rl_sr, starts_with("mini_block"))
model_rl_sr <- lm(RT ~ . -1, data = rl_sr_data)
rl_sr_decay_data <- select(tmp_data, RT, rl_sr_decay, starts_with("mini_block"))
model_rl_sr_decay <- lm(RT ~ . -1, data = rl_sr_decay_data)
bl_ab_result_AIC[i] <- AIC(model_bl_ab)
bl_sr_result_AIC[i] <- AIC(model_bl_sr)
rl_ab_result_AIC[i] <- AIC(model_rl_ab)
rl_sr_result_AIC[i] <- AIC(model_rl_sr)
rl_sr_decay_result_AIC[i] <- AIC(model_rl_sr_decay)
}
# gather the result
AIC_result_table <- data.frame(
bl_ab = bl_ab_result_AIC,
bl_sr = bl_sr_result_AIC,
rl_ab = rl_ab_result_AIC,
rl_sr = rl_sr_result_AIC,
rl_sr_decay = rl_sr_decay_result_AIC
)
AIC_result_table
softmax_func <- function(beta, r){
softmaxed_value <- exp(beta * r) / (exp(beta * r) + exp(beta * (1-r)))
return(softmaxed_value)
}
get_softmaxed_value <- function(beta, r_vector){
softmaxed_r_vector <- vector(mode = "numeric", length = length(r_vector))
for (i in 1:length(r_vector)) {
softmaxed_r_vector[i] <- softmax_func(beta, r_vector[i])
}
return(softmaxed_r_vector)
}
seq(-100, 100, 0.01)
softmax_func <- function(beta, r){
softmaxed_value <- exp(beta * r) / (exp(beta * r) + exp(beta * (1-r)))
return(softmaxed_value)
}
get_softmaxed_value <- function(beta, r_vector){
softmaxed_r_vector <- vector(mode = "numeric", length = length(r_vector))
for (i in 1:length(r_vector)) {
softmaxed_r_vector[i] <- softmax_func(beta, r_vector[i])
}
return(softmaxed_r_vector)
}
softmaxed_result <- matrix(nrow = length(subject_list), ncol = 5)
for (i in seq_len(length(subject_list))) {
tmp_data <- dummy_columns(
filter(
bl_rl_data_miniblock,
subject == subject_list[i]
),
"mini_block"
) %>%
select(-mini_block)
# beta_band
beta_band <- seq(-100, 100, 0.01)
# calc bl_ab
bl_ab_data <- select(tmp_data, RT, bl_ab, starts_with("mini_block"))
bl_ab_r <- bl_ab_data$bl_ab
bl_ab_softmax_parameters_matrix <- matrix(nrow = length(beta_band), ncol = 2)
bl_ab_softmax_parameters_matrix[,1] <- beta_band
for (j in 1:length(beta_band)) {
bl_ab_data$bl_ab <- get_softmaxed_value(beta_band[j], bl_ab_r)
model_bl_ab_softmaxed <- lm(RT ~ . -1, data = bl_ab_data)
AIC_result <- AIC(model_bl_ab_softmaxed)
bl_ab_softmax_parameters_matrix[j, 2] <- AIC_result
}
min_idx <- which(bl_ab_softmax_parameters_matrix[,2] ==
min(bl_ab_softmax_parameters_matrix[,2]))
softmaxed_result[i, 1] <- subject_list[i]
softmaxed_result[i, 2] <- beta_band[idx]
softmaxed_result[i, 3] <- bl_ab_softmax_parameters_matrix[idx, 2]
# calc bl_sr
bl_sr_data <- select(tmp_data, RT, bl_sr, starts_with("mini_block"))
bl_sr_r <- bl_sr_data$bl_sr
bl_sr_softmax_parameters_matrix <- matrix(nrow = length(beta_band), ncol = 2)
bl_sr_softmax_parameters_matrix[,1] <- beta_band
for (j in 1:length(beta_band)) {
bl_sr_data$bl_sr <- get_softmaxed_value(beta_band[j], bl_sr_r)
model_bl_sr_softmaxed <- lm(RT ~ . -1, data = bl_sr_data)
AIC_result <- AIC(model_bl_sr_softmaxed)
bl_sr_softmax_parameters_matrix[j, 2] <- AIC_result
}
min_idx <- which(bl_sr_softmax_parameters_matrix[,2] ==
min(bl_sr_softmax_parameters_matrix[,2]))
softmaxed_result[i, 4] <- beta_band[idx]
softmaxed_result[i, 5] <- bl_sr_softmax_parameters_matrix[idx, 2]
}
min_idx
bl_ab_softmax_parameters_matrix
bl_ab_data
bl_ab_data$bl_ab
beta
j
get_softmaxed_value(0.5, bl_ab_r)
get_softmaxed_value(100, bl_ab_r)
a <- get_softmaxed_value(0.5, bl_ab_r)
bl_ab_data$bl_ab <- a
bl_ab_data
model_bl_ab_softmaxed <- lm(RT ~ . -1, data = bl_ab_data)
model_bl_ab_softmaxed
AIC(model_bl_ab)
AIC_result_table
i
bl_ab_softmax_parameters_matrix[500,]
bl_ab_softmax_parameters_matrix[1000,]
bl_ab_softmax_parameters_matrix[5000,]
which(bl_ab_softmax_parameters_matrix[1,] == 0.5)
which(bl_ab_softmax_parameters_matrix[,1] == 0.5)
bl_ab_softmax_parameters_matrix[10051,]
bl_ab_data <- select(tmp_data, RT, bl_ab, starts_with("mini_block"))
bl_ab_r <- bl_ab_data$bl_ab
bl_ab_softmax_parameters_matrix <- matrix(nrow = length(beta_band), ncol = 2)
bl_ab_softmax_parameters_matrix[,1] <- beta_band
bl_ab_data
j = 20051
bl_ab_data$bl_ab <- get_softmaxed_value(beta_band[j], bl_ab_r)
bl_ab_data$bl_ab
beta_band[20051]
beta_band
beta_band[10051]
#for (j in 1:length(beta_band)) {
j = 10051
bl_ab_data$bl_ab <- get_softmaxed_value(beta_band[j], bl_ab_r)
bl_ab_data$bl_ab
AIC_result <- AIC(model_bl_ab_softmaxed)
AIC_result
model_bl_ab_softmaxed
AIC_result_table
#for (j in 1:length(beta_band)) {
j = 1
bl_ab_data$bl_ab <- get_softmaxed_value(beta_band[j], bl_ab_r)
model_bl_ab_softmaxed <- lm(RT ~ . -1, data = bl_ab_data)
AIC_result <- AIC(model_bl_ab_softmaxed)
AIC_result
AIC_result_table
plot(x = 1:length(bl_ab_softmax_parameters_matrix), y = bl_ab_softmax_parameters_matrix[,2])
plot(x = 1:length(bl_ab_softmax_parameters_matrix[,2]), y = bl_ab_softmax_parameters_matrix[,2])
bl_ab_softmax_parameters_matrix
for (j in 1:length(beta_band)) {
bl_ab_data$bl_ab <- get_softmaxed_value(beta_band[j], bl_ab_r)
model_bl_ab_softmaxed <- lm(RT ~ . -1, data = bl_ab_data)
AIC_result <- AIC(model_bl_ab_softmaxed)
bl_ab_softmax_parameters_matrix[j, 2] <- AIC_result
}
plot(x = 1:length(bl_ab_softmax_parameters_matrix[,2]), y = bl_ab_softmax_parameters_matrix[,2])
min(bl_ab_softmax_parameters_matrix[,2])
AIC_result_table
which(bl_ab_softmax_parameters_matrix[,2] == min(bl_ab_softmax_parameters_matrix[,2]))
bl_ab_data[1,10000]
bl_ab_data[10000,1]
bl_ab_data[10001,1]
bl_ab_softmax_parameters_matrix[10000,1]
a <- c(0,1,1,1,0,1)
p <- c(0.3,0.2,0.9.0;8,0.2,0.3)
mydata <- data.frame(target = a, p = p)
glm(formula = a ~ , family = binomial,
data = maydata)
glm(formula = a ~ , family = binomial, data = maydata)
a <- c(0,1,1,1,0,1)
p <- c(0.3,0.2,0.9.0;8,0.2,0.3)
mydata <- data.frame(target = a, p = p)
glm(formula = a ~ , family = binomial, data = maydata)
a <- c(0,1,1,1,0,1)
p <- c(0.3,0.2,0.9.0;8,0.2,0.3)
mydata <- data.frame(target = a, p = p)
glm(formula = a ~ p, family = binomial, data = maydata)
a <- c(0,1,1,1,0,1)
p <- c(0.3,0.2,0.9.0;8,0.2,0.3)
mydata <- data.frame(target = a, p = p)
glm(formula = a ~ p, family = binomial, data = mydata)
a <- c(0,1,1,1,0,1)
p <- c(0.3,0.2,0.9.0;8,0.2,0.3)
p <- c(0.3,0.2,0.9.0,8,0.2,0.3)
p <- c(0.3,0.2,0.9,8,0.2,0.3)
mydata <- data.frame(target = a, p = p)
glm(formula = a ~ p, family = binomial, data = mydata)
a <- c(0,1,1,1,0,1)
p <- c(0.3,0.2,0.9,8,0.2,0.3)
mydata <- data.frame(target = a, p = p)
my_model <- glm(formula = a ~ p, family = binomial, data = mydata)
AIC(my_model)
a <- c(0,1,1,1,0,1)
p <- c(0.3,0.2,0.2,0.5,0.2,0.3)
mydata <- data.frame(target = a, p = p)
my_model <- glm(formula = a ~ p, family = binomial, data = mydata)
AIC(my_model)
# Modeling
rl_ab_model <- function(alpha, consistency_seq) {
result_vector <- vector(mode = "numeric", length = length(consistency_seq) + 1)
result_vector[1] <- 0.5
# update
for (i in 1:length(consistency_seq)) {
result_vector[i + 1] <- result_vector[i] + alpha * (consistency_seq[i] - result_vector[i])
}
return(result_vector)
}
rl_sr_model <- function(alpha, stim_space_loc, corr_reaction) {
result_vector_stim_l <- vector(mode = "numeric", length = length(stim_space_loc) + 1)
result_vector_stim_r <- vector(mode = "numeric", length = length(stim_space_loc) + 1)
r_selected <- vector(mode = "numeric", length = length(stim_space_loc) + 1)
result_vector_stim_l[1] <- 0.5
result_vector_stim_r[1] <- 0.5
r_selected[1] <- 0.5
# update
for (i in 1:length(stim_space_loc)) {
if (stim_space_loc[i] == "0") {
result_vector_stim_l[i + 1] <- result_vector_stim_l[i] + alpha * (corr_reaction[i] - result_vector_stim_l[i])
result_vector_stim_r[i + 1] <- result_vector_stim_r[i]
r_selected[i + 1] <- result_vector_stim_l[i + 1]
} else {
result_vector_stim_l[i + 1] <- result_vector_stim_l[i]
result_vector_stim_r[i + 1] <- result_vector_stim_r[i] + alpha * (corr_reaction[i] - result_vector_stim_r[i])
r_selected[i + 1] <- result_vector_stim_r[i + 1]
}
return(r_selected)
}
rl_sr_volatile_model <- function(alpha_s, alpha_v, stim_space_loc, corr_reaction, volatility_seq) {
result_vector_stim_l <- vector(mode = "numeric", length = length(stim_space_loc) + 1)
result_vector_stim_r <- vector(mode = "numeric", length = length(stim_space_loc) + 1)
r_selected <- vector(mode = "numeric", length = length(stim_space_loc) + 1)
result_vector_stim_l[1] <- 0.5
result_vector_stim_r[1] <- 0.5
r_selected[1] <- 0.5
# update
for (i in 1:length(stim_space_loc)) {
if (stim_space_loc[i] == "0") {
if (volatility_seq[i] == "0") {
result_vector_stim_l[i + 1] <- result_vector_stim_l[i] + alpha_s * (corr_reaction[i] - result_vector_stim_l[i])
} else {
result_vector_stim_l[i + 1] <- result_vector_stim_l[i] + alpha_v * (corr_reaction[i] - result_vector_stim_l[i])
}
result_vector_stim_r[i + 1] <- result_vector_stim_r[i]
r_selected[i + 1] <- result_vector_stim_l[i + 1]
} else {
result_vector_stim_l[i + 1] <- result_vector_stim_r[i]
if (volatility_seq[i] == "0") {
result_vector_stim_r[i + 1] <- result_vector_stim_r[i] + alpha_s * (corr_reaction[i] - result_vector_stim_r[i])
} else {
result_vector_stim_r[i + 1] <- result_vector_stim_r[i] + alpha_v * (corr_reaction[i] - result_vector_stim_r[i])
}
r_selected[i + 1] <- result_vector_stim_r[i + 1]
}
return(r_selected)
}
# obj_func
rl_ab_obj_func <- function(alpha, consistency_seq) {
predict_seq <- rl_ab_model(alpha, consistency_seq)
model_data <- data.frame(predict_seq = predict_seq[-length(predict_seq)], consistency_seq)
model <- glm(consistency_seq ~ predict_seq, family = binomial, data = model_data)
return(AIC(model))
}
rl_sr_obj_func <- function(alpha, stim_space_loc, corr_reaction) {
predict_seq <- rl_sr_model(alpha, stim_space_loc, corr_reaction)
model_data <- data.frame(predict_seq = predict_seq[-length(predict_seq)], corr_reaction)
model <- glm(corr_reaction ~ predict_seq, family = binomial, data = model_data)
return(AIC(model))
}
rl_sr_volatile_obj_func <- function(alpha_s, alpha_v, stim_space_loc, corr_reaction, volatility_seq) {
predict_seq <- rl_sr_volatile_model(alpha_s, alpha_v, stim_space_loc, corr_reaction, volatility_seq)
model_data <- data.frame(predict_seq = predict_seq[-length(predict_seq)], corr_reaction)
model <- glm(corr_reaction ~ predict_seq, family = binomial, data = model_data)
return(AIC(model))
}
# Import data
# Load data
raw_data <- read.csv("/Users/dddd1007/project2git/cognitive_control_model/data/input/all_data_with_I_hats.csv")
sub_num_list <- unique(raw_data$Subject_num)
# Set output directory
output_dir <- "/Users/dddd1007/project2git/cognitive_control_model/data/output/rl_model/"
# Grid search
## rl_ab
alpha_grid <- seq(0, 1, 0.01)
# for (i in 1:length(sub_num_list)) {
i = 1
single_sub_data <- filter(raw_data, Subject_num == sub_num_list[i])
consistency_seq <- as.numeric(str_replace(str_replace(single_sub_data$congruency, 'con', '1'), 'inc', '0'))
alpha_vector <- vector(mode = "numeric", length = length(alpha_grid))
AIC_vector <- vector(mode = "numeric", length = length(alpha_grid))
for (alpha_num in 1:length(alpha_grid)) {
obj_func_value <- rl_ab_obj_func(alpha_grid[alpha_num], consistency_seq)
# print(paste0("alpha:", alpha, "  AIC:", obj_func_value))
alpha_vector[alpha_num] <- alpha_grid[alpha_num]
AIC_vector[alpha_num] <- obj_func_value
}
single_sub_data <- filter(raw_data, Subject_num == sub_num_list[i])
# Import data
# Load data
raw_data <- read.csv("/Users/dddd1007/project2git/cognitive_control_model/data/input/all_data_with_I_hats.csv")
sub_num_list <- unique(raw_data$Subject_num)
# Set output directory
output_dir <- "/Users/dddd1007/project2git/cognitive_control_model/data/output/rl_model/"
# Grid search
## rl_ab
alpha_grid <- seq(0, 1, 0.01)
rl_ab_result <- list()
# for (i in 1:length(sub_num_list)) {
i = 1
single_sub_data <- filter(raw_data, Subject_num == sub_num_list[i])
# Modeling
rl_ab_model <- function(alpha, consistency_seq) {
result_vector <- vector(mode = "numeric", length = length(consistency_seq) + 1)
result_vector[1] <- 0.5
# update
for (i in 1:length(consistency_seq)) {
result_vector[i + 1] <- result_vector[i] + alpha * (consistency_seq[i] - result_vector[i])
}
return(result_vector)
}
rl_sr_model <- function(alpha, stim_space_loc, corr_reaction) {
result_vector_stim_l <- vector(mode = "numeric", length = length(stim_space_loc) + 1)
result_vector_stim_r <- vector(mode = "numeric", length = length(stim_space_loc) + 1)
r_selected <- vector(mode = "numeric", length = length(stim_space_loc) + 1)
result_vector_stim_l[1] <- 0.5
result_vector_stim_r[1] <- 0.5
r_selected[1] <- 0.5
# update
for (i in 1:length(stim_space_loc)) {
if (stim_space_loc[i] == "0") {
result_vector_stim_l[i + 1] <- result_vector_stim_l[i] + alpha * (corr_reaction[i] - result_vector_stim_l[i])
result_vector_stim_r[i + 1] <- result_vector_stim_r[i]
r_selected[i + 1] <- result_vector_stim_l[i + 1]
} else {
result_vector_stim_l[i + 1] <- result_vector_stim_l[i]
result_vector_stim_r[i + 1] <- result_vector_stim_r[i] + alpha * (corr_reaction[i] - result_vector_stim_r[i])
r_selected[i + 1] <- result_vector_stim_r[i + 1]
}
return(r_selected)
}
rl_sr_volatile_model <- function(alpha_s, alpha_v, stim_space_loc, corr_reaction, volatility_seq) {
result_vector_stim_l <- vector(mode = "numeric", length = length(stim_space_loc) + 1)
result_vector_stim_r <- vector(mode = "numeric", length = length(stim_space_loc) + 1)
r_selected <- vector(mode = "numeric", length = length(stim_space_loc) + 1)
result_vector_stim_l[1] <- 0.5
result_vector_stim_r[1] <- 0.5
r_selected[1] <- 0.5
# update
for (i in 1:length(stim_space_loc)) {
if (stim_space_loc[i] == "0") {
if (volatility_seq[i] == "0") {
result_vector_stim_l[i + 1] <- result_vector_stim_l[i] + alpha_s * (corr_reaction[i] - result_vector_stim_l[i])
} else {
result_vector_stim_l[i + 1] <- result_vector_stim_l[i] + alpha_v * (corr_reaction[i] - result_vector_stim_l[i])
}
result_vector_stim_r[i + 1] <- result_vector_stim_r[i]
r_selected[i + 1] <- result_vector_stim_l[i + 1]
} else {
result_vector_stim_l[i + 1] <- result_vector_stim_r[i]
if (volatility_seq[i] == "0") {
result_vector_stim_r[i + 1] <- result_vector_stim_r[i] + alpha_s * (corr_reaction[i] - result_vector_stim_r[i])
} else {
result_vector_stim_r[i + 1] <- result_vector_stim_r[i] + alpha_v * (corr_reaction[i] - result_vector_stim_r[i])
}
r_selected[i + 1] <- result_vector_stim_r[i + 1]
}
return(r_selected)
}
# obj_func
rl_ab_obj_func <- function(alpha, consistency_seq) {
predict_seq <- rl_ab_model(alpha, consistency_seq)
model_data <- data.frame(predict_seq = predict_seq[-length(predict_seq)], consistency_seq)
model <- glm(consistency_seq ~ predict_seq, family = binomial, data = model_data)
return(AIC(model))
}
rl_sr_obj_func <- function(alpha, stim_space_loc, corr_reaction) {
predict_seq <- rl_sr_model(alpha, stim_space_loc, corr_reaction)
model_data <- data.frame(predict_seq = predict_seq[-length(predict_seq)], corr_reaction)
model <- glm(corr_reaction ~ predict_seq, family = binomial, data = model_data)
return(AIC(model))
}
rl_sr_volatile_obj_func <- function(alpha_s, alpha_v, stim_space_loc, corr_reaction, volatility_seq) {
predict_seq <- rl_sr_volatile_model(alpha_s, alpha_v, stim_space_loc, corr_reaction, volatility_seq)
model_data <- data.frame(predict_seq = predict_seq[-length(predict_seq)], corr_reaction)
model <- glm(corr_reaction ~ predict_seq, family = binomial, data = model_data)
return(AIC(model))
}
# Import data
# Load data
raw_data <- read.csv("/Users/dddd1007/project2git/cognitive_control_model/data/input/all_data_with_I_hats.csv")
sub_num_list <- unique(raw_data$Subject_num)
# Set output directory
output_dir <- "/Users/dddd1007/project2git/cognitive_control_model/data/output/rl_model/"
# Grid search
## rl_ab
alpha_grid <- seq(0, 1, 0.01)
rl_ab_result <- list()
# for (i in 1:length(sub_num_list)) {
i = 1
single_sub_data <- filter(raw_data, Subject_num == sub_num_list[i])
consistency_seq <- as.numeric(str_replace(str_replace(single_sub_data$congruency, 'con', '1'), 'inc', '0'))
alpha_vector <- vector(mode = "numeric", length = length(alpha_grid))
AIC_vector <- vector(mode = "numeric", length = length(alpha_grid))
for (alpha_num in 1:length(alpha_grid)) {
obj_func_value <- rl_ab_obj_func(alpha_grid[alpha_num], consistency_seq)
# print(paste0("alpha:", alpha, "  AIC:", obj_func_value))
alpha_vector[alpha_num] <- alpha_grid[alpha_num]
AIC_vector[alpha_num] <- obj_func_value
}
df = a
df = "a"
final_df = data.frame()
write.csv(final_df, file = paste0("/Users/leiyatian/Desktop/上机课内隐实验/自我与他人视角/data/", as.character(df), ".csv"))
paste0("/Users/leiyatian/Desktop/上机课内隐实验/自我与他人视角/data/", as.character(df), ".csv")
a
paste0("/Users/dddd1007/Desktop/a/", as.character(df), ".csv")
write.csv(final_df, file = paste0("/Users/dddd1007/Desktop/a/", as.character(df), ".csv"))
