} else if (last_line$conflict_type == 0) {
if (last_line$stim_loc == current_line$stim_loc &
last_line$stim_color == current_line$stim_color &
last_line$Subject == current_line$Subject) {
c0_sloc_scolor_index <- append(c0_sloc_scolor_index, idx)
} else if (last_line$stim_loc == current_line$stim_loc &
last_line$stim_color != current_line$stim_color &
last_line$Subject == current_line$Subject) {
c0_sloc_dcolor_index <- append(c0_sloc_dcolor_index, idx)
} else if (last_line$stim_loc != current_line$stim_loc &
last_line$stim_color == current_line$stim_color &
last_line$Subject == current_line$Subject) {
c0_dloc_scolor_index <- append(c0_dloc_scolor_index, idx)
} else if (last_line$stim_loc != current_line$stim_loc &
last_line$stim_color != current_line$stim_color &
last_line$Subject == current_line$Subject) {
c0_dloc_dcolor_index <- append(c0_dloc_dcolor_index, idx)
}
ttest_two_type_trials_RT <- function(input_dataframe, index1, index2) {
x_name <- paste0("mean_", deparse(substitute(index1)))
y_name <- paste0("mean_", deparse(substitute(index2)))
vector_1 <- input_dataframe[index1, ]$RT
vector_2 <- input_dataframe[index2, ]$RT
p_value <- rep(0, 3)
mean_x <- rep(0, 3)
mean_y <- rep(0, 3)
ttest_type <- c("two.sided", "less", "greater")
result1 <- t.test(vector_1, vector_2, alternative = c("two.sided"))
result2 <- t.test(vector_1, vector_2, alternative = c("less"))
result3 <- t.test(vector_1, vector_2, alternative = c("greater"))
p_value[1] <- result1$p.value
p_value[2] <- result2$p.value
p_value[3] <- result3$p.value
mean_x[1] <- result1$estimate[1]
mean_x[2] <- result2$estimate[1]
mean_x[3] <- result3$estimate[1]
mean_y[1] <- result1$estimate[2]
mean_y[2] <- result2$estimate[2]
mean_y[3] <- result3$estimate[2]
total_result <- data.frame(p_value, mean_x, mean_y, ttest_type)
colnames(total_result) <- c("p_value", x_name, y_name, "ttest_type")
return(total_result)
}
ttest_two_type_trials_RT(
add_nblock_table,
c2_sloc_scolor_index, c2_sloc_dcolor_index
)
ttest_two_type_trials_RT(
add_nblock_table,
c1_sloc_scolor_index, c1_sloc_dcolor_index
)
ttest_two_type_trials_RT(
add_nblock_table,
c0_sloc_scolor_index, c0_sloc_dcolor_index
)
ttest_two_type_trials_RT(
add_nblock_table,
c2_sloc_scolor_index, c1_sloc_scolor_index
)
ttest_two_type_trials_RT(
add_nblock_table,
c2_sloc_scolor_index, c0_sloc_scolor_index
)
ttest_two_type_trials_RT(
add_nblock_table,
c1_sloc_scolor_index, c0_sloc_scolor_index
)
add_nblock_table
library(apa)
t_apa(t.test(add_nblock_table$RT[c2_sloc_scolor_index], add_nblock_table$RT[c1_sloc_scolor_index]))
add_nblock_table$RT
add_nblock_table$RT[c2_sloc_scolor_index]
add_nblock_table$RT[c1_sloc_scolor_index]
t.test(add_nblock_table$RT[c2_sloc_scolor_index], add_nblock_table$RT[c1_sloc_scolor_index])
t_apa(t.test(add_nblock_table$RT[c2_sloc_scolor_index], add_nblock_table$RT[c1_sloc_scolor_index]))
t_test(add_nblock_table$RT[c2_sloc_scolor_index], add_nblock_table$RT[c1_sloc_scolor_index]))
t_test(add_nblock_table$RT[c2_sloc_scolor_index], add_nblock_table$RT[c1_sloc_scolor_index])
t_apa(t_test(add_nblock_table$RT[c2_sloc_scolor_index], add_nblock_table$RT[c1_sloc_scolor_index]))
install.packages("psycho")
easystats::install_easystats_latest()
install.packages("remotes")
remotes::install_github("easystats/report")
easystats::install_easystats_latest()
devtools::install_github("easystats/easystats")
remotes::install_github("easystats/easystats")
library(apa)
t_apa(t_test(add_nblock_table$RT[c2_sloc_scolor_index], add_nblock_table$RT[c1_sloc_scolor_index]))
library(report)
report(t.test(add_nblock_table$RT[c2_sloc_scolor_index], add_nblock_table$RT[c1_sloc_scolor_index]))
library(apa)
t_apa(t_test(add_nblock_table$RT[c2_sloc_scolor_index], add_nblock_table$RT[c1_sloc_scolor_index]))
print("/n")
library(report)
report(t.test(add_nblock_table$RT[c2_sloc_scolor_index], add_nblock_table$RT[c1_sloc_scolor_index]))
library(apa)
t_apa(t_test(add_nblock_table$RT[c2_sloc_scolor_index], add_nblock_table$RT[c1_sloc_scolor_index]))
print("\n")
library(report)
report(t.test(add_nblock_table$RT[c2_sloc_scolor_index], add_nblock_table$RT[c1_sloc_scolor_index]))
remotes::install_github("easystats/easystats")
report(coin::independence_test(add_nblock_table$RT[c2_sloc_scolor_index], add_nblock_table$RT[c1_sloc_scolor_index]))
remotes::install_github("easystats/easystats")
easystats::install_easystats_latest()
usethis::browse_github_pat()
usethis::create_github_pat()
usethis::create_github_token()
easystats::install_easystats_latest()
usethis::edit_r_environ()
library(tidyverse)
library(here)
raw_data <- read_csv(here(
"data", "input",
"subdata_with_alpha_decay.csv"
)) %>%
filter(Type == 1)
nrow(raw_data)
raw_data <- mutate(raw_data, PE = 1-p_value)
raw_data %>%
filter(Subject_num == 1) %>%
group_by(run) %>%
summarise(PE_mean = mean(PE))
raw_data %>%
filter(Subject_num == 1) %>%
group_by(run, condition) %>%
summarise(PE_mean = mean(PE))
View(raw_data)
raw_data %>%
filter(Subject_num == 1) %>%
group_by(run, congruency) %>%
summarise(PE_mean = mean(PE))
a = rnorn(100)
a = rnorm(100)
b = 1000 * a + rnorm()
b = 1000 * a + rnorm(100)
cor(a,b)
?scale
a = rnorm(100)
b = log(1000*a + nrow(100))
cor(a, b)
cor.test(a, b)
b
a
b
100*a + rnorm(100)
100*a + rnorm(100) -> b
log(b)
log10(b)
b^2
cor(a, b^2)
scale(b)
plot(density(scale(b)))
plot(density(b))
rlnorm(100)
rlnorm(100) -> foo
plot(density(foo))
plot(density(scale(foo)))
library(tidyverse)
library(here)
raw_data <- read_csv(here(
"data", "input",
"subdata_with_alpha_decay.csv"
)) %>%
filter(Type == 1)
remove_outlier <- function(raw_table){
removed_outlier_table <- raw_table[-which(raw_table$RT %in% boxplot(raw_table$RT, plot=FALSE)$out),]
return(removed_outlier_table)
}
library(purrr)
raw_data %>%
split(.$Subject) %>%
map(remove_outlier) %>%
do.call(rbind, .) -> removed_outlier_data
conflict_type <- rep(0, nrow(removed_outlier_data))
for (i in seq_len(nrow(removed_outlier_data))) {
if (removed_outlier_data[i, ]$if_below_CCC) {
conflict_type[i] <- 2
} else if (!removed_outlier_data[i, ]$if_below_CCC & removed_outlier_data[i, ]$conflict_value < 0) {
conflict_type[i] <- 1
} else if (!removed_outlier_data[i, ]$if_below_CCC & removed_outlier_data[i, ]$conflict_value >= 0) {
conflict_type[i] <- 0
}
head(conflict_type)
add_conflict_type_data <- cbind(removed_outlier_data, conflict_type)
add_conflict_type_data %>%
filter(conflict_type == 2) %>%
group_by(prop) %>%
summarise(prop_type_2 = n())
add_conflict_type_data %>%
filter(conflict_type == 1) %>%
group_by(prop) %>%
summarise(prop_type_1 = n())
add_conflict_type_data %>%
filter(conflict_type == 2) %>%
group_by(prop) %>%
summarise(prop_type_2 = n()) %>%
mutate(per = prop.table(prop_type_2) * 100)
add_conflict_type_data %>%
filter(conflict_type == 1) %>%
group_by(prop) %>%
summarise(prop_type_1 = n()) %>%
mutate(per = prop.table(prop_type_1) * 100)
plot
library
install.packages("tidyverse")
add_conflict_type_data |>
filter(conflict_type == 2) |>
group_by(prop, congruency, condition) |>
summarise(prop_type_2 = n()) |>
mutate(AVG = prop_type_2 / 36)
library(tidyverse)
library(here)
raw_data <- read_csv(here(
"data", "input",
"subdata_with_alpha_decay.csv"
)) |>
filter(Type == 1)
remove_outlier <- function(raw_table){
removed_outlier_table <- raw_table[-which(raw_table$RT %in% boxplot(raw_table$RT, plot=FALSE)$out),]
return(removed_outlier_table)
}
library(purrr)
raw_data |>
split(.$Subject) |>
map(remove_outlier) |>
do.call(rbind, .) -> removed_outlier_data
remove_outlier <- function(raw_table){
removed_outlier_table <- raw_table[-which(raw_table$RT %in% boxplot(raw_table$RT, plot=FALSE)$out),]
return(removed_outlier_table)
}
library(purrr)
raw_data %>%
split(.$Subject) |>
map(remove_outlier) %>%
do.call(rbind, .) -> removed_outlier_data
add_conflict_type_data |>
filter(conflict_type == 2) |>
group_by(Subject, condition) |>
summarise(prop_type_2 = n())
conflict_type <- rep(0, nrow(removed_outlier_data))
for (i in seq_len(nrow(removed_outlier_data))) {
if (removed_outlier_data[i, ]$if_below_CCC) {
conflict_type[i] <- 2
} else if (!removed_outlier_data[i, ]$if_below_CCC & removed_outlier_data[i, ]$conflict_value < 0) {
conflict_type[i] <- 1
} else if (!removed_outlier_data[i, ]$if_below_CCC & removed_outlier_data[i, ]$conflict_value >= 0) {
conflict_type[i] <- 0
}
head(conflict_type)
add_conflict_type_data <- cbind(removed_outlier_data, conflict_type)
add_conflict_type_data |>
filter(conflict_type == 2) |>
group_by(Subject, condition) |>
summarise(prop_type_2 = n())
add_conflict_type_data |>
filter(conflict_type == 1) |>
group_by(Subject, condition) |>
summarise(prop_type_1 = n())
add_conflict_type_data |>
filter(conflict_type == 2) |>
group_by(Subject) |>
summarise(prop_type_2 = n())
add_conflict_type_data |>
filter(conflict_type == 1) |>
group_by(Subject) |>
summarise(prop_type_1 = n())
add_conflict_type_data |>
filter(conflict_type == 2) |>
group_by(prop, congruency, condition) |>
summarise(prop_type_2 = n()) |>
mutate(AVG = prop_type_2 / 36)
add_conflict_type_data |>
filter(conflict_type == 1) |>
group_by(prop, congruency, condition) |>
summarise(prop_type_1 = n()) |>
mutate(AVG = prop_type_1 / 36)
add_conflict_type_data |>
group_by(prop, congruency, condition) |>
summarise(prop_type_1 = n()) |>
mutate(AVG = prop_type_1 / 36)
add_nblock_table |>
filter(conflict_type == 2) |>
group_by(Subject, nblock) |>
summarise(prop_type_2 = n()) |>
ggplot() +
geom_line(aes(x = nblock, y = prop_type_2, colour = Subject))
change_block_index <- function(input_dataframe) {
prop_value <- input_dataframe$prop
block_value <- rep(0, length(prop_value))
block_index <- 1
last_prop <- prop_value[1]
for (i in seq_len(length(prop_value))) {
if (last_prop != prop_value[i]) {
block_index <- block_index + 1
last_prop <- prop_value[i]
}
block_value[i] <- block_index
}
input_dataframe$nblock <- block_value
return(input_dataframe)
}
add_nblock_list <- list()
for (i in seq_len(18)) {
foo <- filter(add_conflict_type_data, Subject_num == i)
add_nblock_list[[i]] <- change_block_index(foo)
}
add_nblock_table <- do.call(rbind, add_nblock_list)
add_nblock_table |>
filter(conflict_type == 2) |>
group_by(Subject, nblock) |>
summarise(prop_type_2 = n()) |>
ggplot() +
geom_line(aes(x = nblock, y = prop_type_2, colour = Subject))
add_nblock_table |>
filter(conflict_type == 1) |>
group_by(Subject, nblock) |>
summarise(prop_type_1 = n()) |>
ggplot() +
geom_line(aes(x = nblock, y = prop_type_1, colour = Subject))
remove_outlier <- function(raw_table){
removed_outlier_table <- raw_table[-which(raw_table$RT %in% boxplot(raw_table$RT, plot=FALSE)$out),]
return(removed_outlier_table)
}
library(purrr)
raw_data |>
(x){split(x$Subject)} |>
remove_outlier <- function(raw_table){
removed_outlier_table <- raw_table[-which(raw_table$RT %in% boxplot(raw_table$RT, plot=FALSE)$out),]
return(removed_outlier_table)
}
library(purrr)
raw_data |>
\(x){split(x$Subject)} |>
map(remove_outlier) %>%
do.call(rbind, .) -> removed_outlier_data
remove_outlier <- function(raw_table){
removed_outlier_table <- raw_table[-which(raw_table$RT %in% boxplot(raw_table$RT, plot=FALSE)$out),]
return(removed_outlier_table)
}
library(purrr)
raw_data |>
{\(x) split(x$Subject)} |>
map(remove_outlier) %>%
do.call(rbind, .) -> removed_outlier_data
remove_outlier <- function(raw_table){
removed_outlier_table <- raw_table[-which(raw_table$RT %in% boxplot(raw_table$RT, plot=FALSE)$out),]
return(removed_outlier_table)
}
library(purrr)
raw_data |>
{\(x) split(x$Subject)}() |>
map(remove_outlier) %>%
do.call(rbind, .) -> removed_outlier_data
remove_outlier <- function(raw_table){
removed_outlier_table <- raw_table[-which(raw_table$RT %in% boxplot(raw_table$RT, plot=FALSE)$out),]
return(removed_outlier_table)
}
library(purrr)
raw_data |>
split(~Subject) |>
map(remove_outlier) %>%
do.call(rbind, .) -> removed_outlier_data
install.packages("xaringan")
rstan::stan_version()
remove.packages("rstan")
# we recommend running this is a fresh R session or restarting your current session
install.packages("cmdstanr", repos = c("https://mc-stan.org/r-packages/", getOption("repos")))
cmdstanr::install_cmdstan()
library(cmdstanr)
library(posterior)
library(bayesplot)
check_cmdstan_toolchain()
file <- "~/project2git/cognitive_control_model/Bayesian_Models"
bayesian_sr_learner <- cmdstan_model(file)
file <- "~/project2git/cognitive_control_model/Bayesian_Models/bayesian_learner_sr.stan"
bayesian_sr_learner <- cmdstan_model(file)
rebuild_cmdstan()
bayesian_sr_learner <- cmdstan_model(file)
library(readr)
all_data_with_I_hats <- read_csv("data/input/all_data_with_I_hats.csv")
View(all_data_with_I_hats)
stim_loc_num <- vector(mode = "numeric", length = nrow(all_data_with_I_hats))
for (i in 1 : nrow(all_data_with_I_hats)) {
if (all_data_with_I_hats$stim_loc[i] == "left"){
stim_loc_num[i] <- 0
}else{
stim_loc_num[i] <- 1
}
all_data_with_I_hats <- cbind(all_data_with_I_hats, stim_loc_num)
all_data_with_I_hats
write.csv(all_data_with_I_hats, "/Users/dddd1007/project2git/cognitive_control_model/data/input/all_data_with_I_hats.csv")
library(cmdstanr)
library(posterior)
library(bayesplot)
library(tidyverse)
check_cmdstan_toolchain()
sr_1k1v_stanfile <- "/Users/dddd1007/project2git/cognitive_control_model/Bayesian_Models/bayesian_learner_sr_1k1v.stan"
sr_1k2v_stanfile <- "/Users/dddd1007/project2git/cognitive_control_model/Bayesian_Models/bayesian_learner_sr_1k2v.stan"
sr_2k2v_stanfile <- "/Users/dddd1007/project2git/cognitive_control_model/Bayesian_Models/bayesian_learner_sr_2k2v.stan"
sr_1k1v_learner <- cmdstan_model(sr_1k1v_stanfile)
sr_1k2v_learner <- cmdstan_model(sr_1k2v_stanfile)
sr_2k2v_learner <- cmdstan_model(sr_2k2v_stanfile)
rebuild_cmdstan()
library(cmdstanr)
library(posterior)
library(bayesplot)
library(tidyverse)
check_cmdstan_toolchain()
sr_1k1v_stanfile <- "/Users/dddd1007/project2git/cognitive_control_model/Bayesian_Models/bayesian_learner_sr_1k1v.stan"
sr_1k2v_stanfile <- "/Users/dddd1007/project2git/cognitive_control_model/Bayesian_Models/bayesian_learner_sr_1k2v.stan"
sr_2k2v_stanfile <- "/Users/dddd1007/project2git/cognitive_control_model/Bayesian_Models/bayesian_learner_sr_2k2v.stan"
sr_1k1v_learner <- cmdstan_model(sr_1k1v_stanfile)
sr_1k2v_learner <- cmdstan_model(sr_1k2v_stanfile)
sr_2k2v_learner <- cmdstan_model(sr_2k2v_stanfile)
raw_data <- read.csv("/Users/dddd1007/project2git/cognitive_control_model/data/input/all_data_with_I_hats.csv")
# for loop
sub_num_list <- unique(raw_data$Subject_num)
sub_num_list
output_dir_1k1v <- "/Users/dddd1007/project2git/cognitive_control_model/data/output/bayesian_learner_samplers/compare_1k1v_1k2v_2k2v/1k1v/"
output_dir_1k2v <- "/Users/dddd1007/project2git/cognitive_control_model/data/output/bayesian_learner_samplers/compare_1k1v_1k2v_2k2v/1k2v/"
output_dir_2k2v <- "/Users/dddd1007/project2git/cognitive_control_model/data/output/bayesian_learner_samplers/compare_1k1v_1k2v_2k2v/2k2v/"
library(cmdstanr)
library(posterior)
library(bayesplot)
library(tidyverse)
check_cmdstan_toolchain()
sr_1k1v_stanfile <- "/Users/dddd1007/project2git/cognitive_control_model/Bayesian_Models/bayesian_learner_sr_1k1v.stan"
sr_1k2v_stanfile <- "/Users/dddd1007/project2git/cognitive_control_model/Bayesian_Models/bayesian_learner_sr_1k2v.stan"
sr_2k2v_stanfile <- "/Users/dddd1007/project2git/cognitive_control_model/Bayesian_Models/bayesian_learner_sr_2k2v.stan"
sr_1k1v_learner <- cmdstan_model(sr_1k1v_stanfile)
sr_1k2v_learner <- cmdstan_model(sr_1k2v_stanfile)
sr_2k2v_learner <- cmdstan_model(sr_2k2v_stanfile)
output_dir_1k1v <- "/Users/dddd1007/project2git/cognitive_control_model/data/output/bayesian_learner_samplers/compare_1k1v_1k2v_2k2v/1k1v/"
output_dir_1k2v <- "/Users/dddd1007/project2git/cognitive_control_model/data/output/bayesian_learner_samplers/compare_1k1v_1k2v_2k2v/1k2v/"
output_dir_2k2v <- "/Users/dddd1007/project2git/cognitive_control_model/data/output/bayesian_learner_samplers/compare_1k1v_1k2v_2k2v/2k2v/"
#####
##### Estimate Model
#####
# Load data
raw_data <- read.csv("/Users/dddd1007/project2git/cognitive_control_model/data/input/all_data_with_I_hats.csv")
# Estimate each sub
sub_num_list <- unique(raw_data$Subject_num)
for (i in sub_num_list) {
single_sub_table <- filter(raw_data, Subject_num == i)
N = nrow(single_sub_table)
react = single_sub_table$correct_action
space_loc = single_sub_table$stim_loc_num
data_list = list(N = N, react = react, space_loc = space_loc)
# model1 1k1v
file_save_path_1k1v = paste0(output_dir_1k1v, "sub_", as.character(i))
fit1 <- sr_1k1v_learner$sample(
data = data_list,
chains = 4,
parallel_chains = 4,
refresh = 500,
output_dir = file_save_path_1k1v
)
# model1 1k2v
file_save_path_1k2v = paste0(output_dir_1k2v, "sub_", as.character(i))
fit2 <- sr_1k2v_learner$sample(
data = data_list,
chains = 4,
parallel_chains = 4,
refresh = 500,
output_dir = file_save_path_1k2v
)
# model1 2k2v
file_save_path_2k2v = paste0(output_dir_2k2v, "sub_", as.character(i))
fit3 <- sr_2k2v_learner$sample(
data = data_list,
chains = 4,
parallel_chains = 4,
refresh = 500,
output_dir = file_save_path_2k2v
)
}
for (i in sub_num_list) {
single_sub_table <- filter(raw_data, Subject_num == i)
N = nrow(single_sub_table)
react = single_sub_table$correct_action
space_loc = single_sub_table$stim_loc_num
data_list = list(N = N, react = react, space_loc = space_loc)
# model1 1k1v
file_save_path_1k1v = paste0(output_dir_1k1v, "sub_", as.character(i))
dir.create(file_save_path_1k1v)
fit1 <- sr_1k1v_learner$sample(
data = data_list,
chains = 4,
parallel_chains = 4,
refresh = 500,
output_dir = file_save_path_1k1v
)
# model1 1k2v
file_save_path_1k2v = paste0(output_dir_1k2v, "sub_", as.character(i))
dir.create(file_save_path_1k2v)
fit2 <- sr_1k2v_learner$sample(
data = data_list,
chains = 4,
parallel_chains = 4,
refresh = 500,
output_dir = file_save_path_1k2v
)
# model1 2k2v
file_save_path_2k2v = paste0(output_dir_2k2v, "sub_", as.character(i))
dir.create(file_save_path_2k2v)
fit3 <- sr_2k2v_learner$sample(
data = data_list,
chains = 4,
parallel_chains = 4,
refresh = 500,
output_dir = file_save_path_2k2v
)
}
