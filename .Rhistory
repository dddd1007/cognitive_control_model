output_dir_2k2v <- "/Users/dddd1007/project2git/cognitive_control_model/data/output/bayesian_learner_samplers/compare_1k1v_1k2v_2k2v/2k2v/"
library(cmdstanr)
library(posterior)
library(bayesplot)
library(tidyverse)
check_cmdstan_toolchain()
sr_1k1v_stanfile <- "/Users/dddd1007/project2git/cognitive_control_model/Bayesian_Models/bayesian_learner_sr_1k1v.stan"
sr_1k2v_stanfile <- "/Users/dddd1007/project2git/cognitive_control_model/Bayesian_Models/bayesian_learner_sr_1k2v.stan"
sr_2k2v_stanfile <- "/Users/dddd1007/project2git/cognitive_control_model/Bayesian_Models/bayesian_learner_sr_2k2v.stan"
sr_1k1v_learner <- cmdstan_model(sr_1k1v_stanfile)
sr_1k2v_learner <- cmdstan_model(sr_1k2v_stanfile)
sr_2k2v_learner <- cmdstan_model(sr_2k2v_stanfile)
output_dir_1k1v <- "/Users/dddd1007/project2git/cognitive_control_model/data/output/bayesian_learner_samplers/compare_1k1v_1k2v_2k2v/1k1v/"
output_dir_1k2v <- "/Users/dddd1007/project2git/cognitive_control_model/data/output/bayesian_learner_samplers/compare_1k1v_1k2v_2k2v/1k2v/"
output_dir_2k2v <- "/Users/dddd1007/project2git/cognitive_control_model/data/output/bayesian_learner_samplers/compare_1k1v_1k2v_2k2v/2k2v/"
#####
##### Estimate Model
#####
# Load data
raw_data <- read.csv("/Users/dddd1007/project2git/cognitive_control_model/data/input/all_data_with_I_hats.csv")
# Estimate each sub
sub_num_list <- unique(raw_data$Subject_num)
for (i in sub_num_list) {
single_sub_table <- filter(raw_data, Subject_num == i)
N = nrow(single_sub_table)
react = single_sub_table$correct_action
space_loc = single_sub_table$stim_loc_num
data_list = list(N = N, react = react, space_loc = space_loc)
# model1 1k1v
file_save_path_1k1v = paste0(output_dir_1k1v, "sub_", as.character(i))
fit1 <- sr_1k1v_learner$sample(
data = data_list,
chains = 4,
parallel_chains = 4,
refresh = 500,
output_dir = file_save_path_1k1v
)
# model1 1k2v
file_save_path_1k2v = paste0(output_dir_1k2v, "sub_", as.character(i))
fit2 <- sr_1k2v_learner$sample(
data = data_list,
chains = 4,
parallel_chains = 4,
refresh = 500,
output_dir = file_save_path_1k2v
)
# model1 2k2v
file_save_path_2k2v = paste0(output_dir_2k2v, "sub_", as.character(i))
fit3 <- sr_2k2v_learner$sample(
data = data_list,
chains = 4,
parallel_chains = 4,
refresh = 500,
output_dir = file_save_path_2k2v
)
}
for (i in sub_num_list) {
single_sub_table <- filter(raw_data, Subject_num == i)
N = nrow(single_sub_table)
react = single_sub_table$correct_action
space_loc = single_sub_table$stim_loc_num
data_list = list(N = N, react = react, space_loc = space_loc)
# model1 1k1v
file_save_path_1k1v = paste0(output_dir_1k1v, "sub_", as.character(i))
dir.create(file_save_path_1k1v)
fit1 <- sr_1k1v_learner$sample(
data = data_list,
chains = 4,
parallel_chains = 4,
refresh = 500,
output_dir = file_save_path_1k1v
)
# model1 1k2v
file_save_path_1k2v = paste0(output_dir_1k2v, "sub_", as.character(i))
dir.create(file_save_path_1k2v)
fit2 <- sr_1k2v_learner$sample(
data = data_list,
chains = 4,
parallel_chains = 4,
refresh = 500,
output_dir = file_save_path_1k2v
)
# model1 2k2v
file_save_path_2k2v = paste0(output_dir_2k2v, "sub_", as.character(i))
dir.create(file_save_path_2k2v)
fit3 <- sr_2k2v_learner$sample(
data = data_list,
chains = 4,
parallel_chains = 4,
refresh = 500,
output_dir = file_save_path_2k2v
)
}
library(cmdstanr)
library(posterior)
library(bayesplot)
library(tidyverse)
check_cmdstan_toolchain()
sr_1k1v_stanfile <- "/Users/dddd1007/project2git/cognitive_control_model/Bayesian_Models/bayesian_learner_sr_1k1v.stan"
sr_1k2v_stanfile <- "/Users/dddd1007/project2git/cognitive_control_model/Bayesian_Models/bayesian_learner_sr_1k2v.stan"
sr_2k2v_stanfile <- "/Users/dddd1007/project2git/cognitive_control_model/Bayesian_Models/bayesian_learner_sr_2k2v.stan"
sr_1k1v_learner <- cmdstan_model(sr_1k1v_stanfile)
sr_1k2v_learner <- cmdstan_model(sr_1k2v_stanfile)
sr_2k2v_learner <- cmdstan_model(sr_2k2v_stanfile)
output_dir_1k1v <- "/Users/dddd1007/project2git/cognitive_control_model/data/output/bayesian_learner_samplers/compare_1k1v_1k2v_2k2v/1k1v/"
output_dir_1k2v <- "/Users/dddd1007/project2git/cognitive_control_model/data/output/bayesian_learner_samplers/compare_1k1v_1k2v_2k2v/1k2v/"
output_dir_2k2v <- "/Users/dddd1007/project2git/cognitive_control_model/data/output/bayesian_learner_samplers/compare_1k1v_1k2v_2k2v/2k2v/"
cmdstanr::install_cmdstan(cores = 8, overwrite = TRUE)
library(cmdstanr)
library(posterior)
library(bayesplot)
library(tidyverse)
check_cmdstan_toolchain()
sr_1k1v_stanfile <- "/Users/dddd1007/project2git/cognitive_control_model/Bayesian_Models/bayesian_learner_sr_1k1v.stan"
sr_1k2v_stanfile <- "/Users/dddd1007/project2git/cognitive_control_model/Bayesian_Models/bayesian_learner_sr_1k2v.stan"
sr_2k2v_stanfile <- "/Users/dddd1007/project2git/cognitive_control_model/Bayesian_Models/bayesian_learner_sr_2k2v.stan"
sr_1k1v_learner <- cmdstan_model(sr_1k1v_stanfile)
sr_1k2v_learner <- cmdstan_model(sr_1k2v_stanfile)
sr_2k2v_learner <- cmdstan_model(sr_2k2v_stanfile)
output_dir_1k1v <- "/Users/dddd1007/project2git/cognitive_control_model/data/output/bayesian_learner_samplers/compare_1k1v_1k2v_2k2v/1k1v/"
output_dir_1k2v <- "/Users/dddd1007/project2git/cognitive_control_model/data/output/bayesian_learner_samplers/compare_1k1v_1k2v_2k2v/1k2v/"
output_dir_2k2v <- "/Users/dddd1007/project2git/cognitive_control_model/data/output/bayesian_learner_samplers/compare_1k1v_1k2v_2k2v/2k2v/"
#####
##### Estimate Model
#####
# Load data
raw_data <- read.csv("/Users/dddd1007/project2git/cognitive_control_model/data/input/all_data_with_I_hats.csv")
# Estimate each sub
sub_num_list <- unique(raw_data$Subject_num)
sub_num_list <- sub_num_list[which(sub_num_list > 18)]
for (i in sub_num_list) {
single_sub_table <- filter(raw_data, Subject_num == i)
N = nrow(single_sub_table)
react = single_sub_table$correct_action
space_loc = single_sub_table$stim_loc_num
data_list = list(N = N, react = react, space_loc = space_loc)
# model1 1k1v
file_save_path_1k1v = paste0(output_dir_1k1v, "sub_", as.character(i))
dir.create(file_save_path_1k1v)
fit1 <- sr_1k1v_learner$sample(
data = data_list,
chains = 4,
parallel_chains = 4,
refresh = 500,
output_dir = file_save_path_1k1v
)
# model1 1k2v
file_save_path_1k2v = paste0(output_dir_1k2v, "sub_", as.character(i))
dir.create(file_save_path_1k2v)
fit2 <- sr_1k2v_learner$sample(
data = data_list,
chains = 4,
parallel_chains = 4,
refresh = 500,
output_dir = file_save_path_1k2v
)
# model1 2k2v
file_save_path_2k2v = paste0(output_dir_2k2v, "sub_", as.character(i))
dir.create(file_save_path_2k2v)
fit3 <- sr_2k2v_learner$sample(
data = data_list,
chains = 4,
parallel_chains = 4,
refresh = 500,
output_dir = file_save_path_2k2v
)
}
cmdstanr::rebuild_cmdstan()
install.packages(c("corrplot", "glue", "nloptr", "RcppArmadillo", "sp", "tibble", "xfun"))
library(ggplot2)
library(tidyverse)
library(here)
library(ggsci)
library(ggthemes)
library(rstatix)
library(ggpubr)
library(patchwork)
library(fastDummies)
# helper function
range01 <- function(x) {
(x - min(x)) / (max(x) - min(x))
}
# input data
rl_data <- read.csv(here("data", "input", "all_data_with_rl_model.csv"))
bl_data <- read.csv(here("data", "input", "all_data_with_sr_ab_bayesian_learner.csv"))
merged_data <- inner_join(rl_data, bl_data, by = c("Subject", "Trial"))
bl_rl_data <- data.frame(
subject = merged_data$Subject_num.y,
trials = merged_data$Trial,
hand = merged_data$Response.x,
block = merged_data$block.x,
run = merged_data$run.x,
congruency = merged_data$congruency.x,
type = merged_data$Type.x,
prop = merged_data$prop.x * 0.01,
condition = merged_data$condition.x,
RT = merged_data$RT.y,
rl_ab = merged_data$AB,
rl_sr = merged_data$SR,
rl_sr_decay = merged_data$SR_Decay,
bl_ab = merged_data$ab_r_selected,
bl_ab_RT = merged_data$ab_RT_r_selected,
bl_ab_logRT = merged_data$ab_logRT_r_selected,
bl_sr = merged_data$sr_r_selected,
bl_sr_softmaxed = merged_data$softmaxed_r,
bl_sr_softmaxed_2 = merged_data$softmaxed_r_2,
bl_sr_RT = merged_data$sr_RT_r_selected,
bl_sr_RT_decay = merged_data$sr_RT_decay_r_selected,
bl_sr_logRT = merged_data$sr_logRT_r_selected,
bl_sr_logRT_decay = merged_data$sr_logRT_decay_r_selected
)
# post_error_idx <- which(bl_rl_data$type != "hit") - 1
# bl_rl_data_without_post_error <- bl_rl_data[-post_error_idx, ]
bl_rl_data_without_errors_outlier <- filter(bl_rl_data, type == "hit") %>%
group_by(subject, congruency, prop, condition) %>%
filter(abs(RT - mean(RT)) < (sd(RT) * 3))
result_list <- list()
subject_list <- unique(bl_rl_data$subject)
sub_count <- 1
for (i in subject_list) {
tmp_data <- filter(bl_rl_data_without_errors_outlier, subject == i)
mini_num <- 1
mini_block <- vector(mode = "numeric", length = nrow(tmp_data))
mini_block[1] <- 1
for (line_num in 2:nrow(tmp_data)) {
if (tmp_data$prop[line_num] != tmp_data$prop[line_num - 1]) {
mini_num <- mini_num + 1
}
mini_block[line_num] <- mini_num
}
tmp_data$mini_block <- mini_block
result_list[[sub_count]] <- tmp_data
sub_count <- sub_count + 1
}
bl_rl_data_miniblock <- bind_rows(result_list, .id = "column_label")
rl_ab_result_AIC <- vector(
mode = "numeric",
length = length(subject_list)
)
rl_sr_result_AIC <- vector(
mode = "numeric",
length = length(subject_list)
)
rl_sr_decay_result_AIC <- vector(
mode = "numeric",
length = length(subject_list)
)
bl_ab_result_AIC <- vector(
mode = "numeric",
length = length(subject_list)
)
bl_sr_result_AIC <- vector(
mode = "numeric",
length = length(subject_list)
)
# for (i in seq_len(length(subject_list))) {
i = 1
tmp_data <- dummy_columns(
filter(
bl_rl_data_miniblock,
subject == i
),
"mini_block"
) %>%
select(-mini_block)
bl_ab_data <- select(tmp_data, RT, bl_ab, starts_with("mini_block"))
model_bl_ab <- lm(RT ~ . -1, data = bl_ab_data)
bl_sr_data <- select(tmp_data, RT, bl_sr, starts_with("mini_block"))
model_bl_sr <- lm(RT ~ . -1, data = bl_sr_data)
rl_ab_data <- select(tmp_data, RT, rl_ab, starts_with("mini_block"))
model_rl_ab <- lm(RT ~ . -1, data = rl_ab_data)
rl_sr_data <- select(tmp_data, RT, rl_sr, starts_with("mini_block"))
model_rl_sr <- lm(RT ~ . -1, data = rl_sr_data)
rl_sr_decay_data <- select(tmp_data, RT, rl_sr_decay, starts_with("mini_block"))
model_rl_sr_decay <- lm(RT ~ . -1, data = rl_sr_decay_data)
bl_ab_result_AIC[i] <- AIC(model_bl_ab)
bl_sr_result_AIC[i] <- AIC(model_bl_sr)
rl_ab_result_AIC[i] <- AIC(model_rl_ab)
rl_sr_result_AIC[i] <- AIC(model_rl_sr)
rl_sr_decay_result_AIC[i] <- AIC(model_rl_sr_decay)
}
rl_ab_result_AIC <- vector(
mode = "numeric",
length = length(subject_list)
)
rl_sr_result_AIC <- vector(
mode = "numeric",
length = length(subject_list)
)
rl_sr_decay_result_AIC <- vector(
mode = "numeric",
length = length(subject_list)
)
bl_ab_result_AIC <- vector(
mode = "numeric",
length = length(subject_list)
)
bl_sr_result_AIC <- vector(
mode = "numeric",
length = length(subject_list)
)
for (i in seq_len(length(subject_list))) {
tmp_data <- dummy_columns(
filter(
bl_rl_data_miniblock,
subject == i
),
"mini_block"
) %>%
select(-mini_block)
bl_ab_data <- select(tmp_data, RT, bl_ab, starts_with("mini_block"))
model_bl_ab <- lm(RT ~ . -1, data = bl_ab_data)
bl_sr_data <- select(tmp_data, RT, bl_sr, starts_with("mini_block"))
model_bl_sr <- lm(RT ~ . -1, data = bl_sr_data)
rl_ab_data <- select(tmp_data, RT, rl_ab, starts_with("mini_block"))
model_rl_ab <- lm(RT ~ . -1, data = rl_ab_data)
rl_sr_data <- select(tmp_data, RT, rl_sr, starts_with("mini_block"))
model_rl_sr <- lm(RT ~ . -1, data = rl_sr_data)
rl_sr_decay_data <- select(tmp_data, RT, rl_sr_decay, starts_with("mini_block"))
model_rl_sr_decay <- lm(RT ~ . -1, data = rl_sr_decay_data)
bl_ab_result_AIC[i] <- AIC(model_bl_ab)
bl_sr_result_AIC[i] <- AIC(model_bl_sr)
rl_ab_result_AIC[i] <- AIC(model_rl_ab)
rl_sr_result_AIC[i] <- AIC(model_rl_sr)
rl_sr_decay_result_AIC[i] <- AIC(model_rl_sr_decay)
}
rl_ab_result_AIC <- vector(
mode = "numeric",
length = length(subject_list)
)
rl_sr_result_AIC <- vector(
mode = "numeric",
length = length(subject_list)
)
rl_sr_decay_result_AIC <- vector(
mode = "numeric",
length = length(subject_list)
)
bl_ab_result_AIC <- vector(
mode = "numeric",
length = length(subject_list)
)
bl_sr_result_AIC <- vector(
mode = "numeric",
length = length(subject_list)
)
for (i in seq_len(length(subject_list))) {
tmp_data <- dummy_columns(
filter(
bl_rl_data_miniblock,
subject == subject_list[i]
),
"mini_block"
) %>%
select(-mini_block)
bl_ab_data <- select(tmp_data, RT, bl_ab, starts_with("mini_block"))
model_bl_ab <- lm(RT ~ . -1, data = bl_ab_data)
bl_sr_data <- select(tmp_data, RT, bl_sr, starts_with("mini_block"))
model_bl_sr <- lm(RT ~ . -1, data = bl_sr_data)
rl_ab_data <- select(tmp_data, RT, rl_ab, starts_with("mini_block"))
model_rl_ab <- lm(RT ~ . -1, data = rl_ab_data)
rl_sr_data <- select(tmp_data, RT, rl_sr, starts_with("mini_block"))
model_rl_sr <- lm(RT ~ . -1, data = rl_sr_data)
rl_sr_decay_data <- select(tmp_data, RT, rl_sr_decay, starts_with("mini_block"))
model_rl_sr_decay <- lm(RT ~ . -1, data = rl_sr_decay_data)
bl_ab_result_AIC[i] <- AIC(model_bl_ab)
bl_sr_result_AIC[i] <- AIC(model_bl_sr)
rl_ab_result_AIC[i] <- AIC(model_rl_ab)
rl_sr_result_AIC[i] <- AIC(model_rl_sr)
rl_sr_decay_result_AIC[i] <- AIC(model_rl_sr_decay)
}
# gather the result
AIC_result_table <- data.frame(
bl_ab = bl_ab_result_AIC,
bl_sr = bl_sr_result_AIC,
rl_ab = rl_ab_result_AIC,
rl_sr = rl_sr_result_AIC,
rl_sr_decay = rl_sr_decay_result_AIC
)
AIC_result_table
softmax_func <- function(beta, r){
softmaxed_value <- exp(beta * r) / (exp(beta * r) + exp(beta * (1-r)))
return(softmaxed_value)
}
get_softmaxed_value <- function(beta, r_vector){
softmaxed_r_vector <- vector(mode = "numeric", length = length(r_vector))
for (i in 1:length(r_vector)) {
softmaxed_r_vector[i] <- softmax_func(beta, r_vector[i])
}
return(softmaxed_r_vector)
}
seq(-100, 100, 0.01)
softmax_func <- function(beta, r){
softmaxed_value <- exp(beta * r) / (exp(beta * r) + exp(beta * (1-r)))
return(softmaxed_value)
}
get_softmaxed_value <- function(beta, r_vector){
softmaxed_r_vector <- vector(mode = "numeric", length = length(r_vector))
for (i in 1:length(r_vector)) {
softmaxed_r_vector[i] <- softmax_func(beta, r_vector[i])
}
return(softmaxed_r_vector)
}
softmaxed_result <- matrix(nrow = length(subject_list), ncol = 5)
for (i in seq_len(length(subject_list))) {
tmp_data <- dummy_columns(
filter(
bl_rl_data_miniblock,
subject == subject_list[i]
),
"mini_block"
) %>%
select(-mini_block)
# beta_band
beta_band <- seq(-100, 100, 0.01)
# calc bl_ab
bl_ab_data <- select(tmp_data, RT, bl_ab, starts_with("mini_block"))
bl_ab_r <- bl_ab_data$bl_ab
bl_ab_softmax_parameters_matrix <- matrix(nrow = length(beta_band), ncol = 2)
bl_ab_softmax_parameters_matrix[,1] <- beta_band
for (j in 1:length(beta_band)) {
bl_ab_data$bl_ab <- get_softmaxed_value(beta_band[j], bl_ab_r)
model_bl_ab_softmaxed <- lm(RT ~ . -1, data = bl_ab_data)
AIC_result <- AIC(model_bl_ab_softmaxed)
bl_ab_softmax_parameters_matrix[j, 2] <- AIC_result
}
min_idx <- which(bl_ab_softmax_parameters_matrix[,2] ==
min(bl_ab_softmax_parameters_matrix[,2]))
softmaxed_result[i, 1] <- subject_list[i]
softmaxed_result[i, 2] <- beta_band[idx]
softmaxed_result[i, 3] <- bl_ab_softmax_parameters_matrix[idx, 2]
# calc bl_sr
bl_sr_data <- select(tmp_data, RT, bl_sr, starts_with("mini_block"))
bl_sr_r <- bl_sr_data$bl_sr
bl_sr_softmax_parameters_matrix <- matrix(nrow = length(beta_band), ncol = 2)
bl_sr_softmax_parameters_matrix[,1] <- beta_band
for (j in 1:length(beta_band)) {
bl_sr_data$bl_sr <- get_softmaxed_value(beta_band[j], bl_sr_r)
model_bl_sr_softmaxed <- lm(RT ~ . -1, data = bl_sr_data)
AIC_result <- AIC(model_bl_sr_softmaxed)
bl_sr_softmax_parameters_matrix[j, 2] <- AIC_result
}
min_idx <- which(bl_sr_softmax_parameters_matrix[,2] ==
min(bl_sr_softmax_parameters_matrix[,2]))
softmaxed_result[i, 4] <- beta_band[idx]
softmaxed_result[i, 5] <- bl_sr_softmax_parameters_matrix[idx, 2]
}
min_idx
bl_ab_softmax_parameters_matrix
bl_ab_data
bl_ab_data$bl_ab
beta
j
get_softmaxed_value(0.5, bl_ab_r)
get_softmaxed_value(100, bl_ab_r)
a <- get_softmaxed_value(0.5, bl_ab_r)
bl_ab_data$bl_ab <- a
bl_ab_data
model_bl_ab_softmaxed <- lm(RT ~ . -1, data = bl_ab_data)
model_bl_ab_softmaxed
AIC(model_bl_ab)
AIC_result_table
i
bl_ab_softmax_parameters_matrix[500,]
bl_ab_softmax_parameters_matrix[1000,]
bl_ab_softmax_parameters_matrix[5000,]
which(bl_ab_softmax_parameters_matrix[1,] == 0.5)
which(bl_ab_softmax_parameters_matrix[,1] == 0.5)
bl_ab_softmax_parameters_matrix[10051,]
bl_ab_data <- select(tmp_data, RT, bl_ab, starts_with("mini_block"))
bl_ab_r <- bl_ab_data$bl_ab
bl_ab_softmax_parameters_matrix <- matrix(nrow = length(beta_band), ncol = 2)
bl_ab_softmax_parameters_matrix[,1] <- beta_band
bl_ab_data
j = 20051
bl_ab_data$bl_ab <- get_softmaxed_value(beta_band[j], bl_ab_r)
bl_ab_data$bl_ab
beta_band[20051]
beta_band
beta_band[10051]
#for (j in 1:length(beta_band)) {
j = 10051
bl_ab_data$bl_ab <- get_softmaxed_value(beta_band[j], bl_ab_r)
bl_ab_data$bl_ab
AIC_result <- AIC(model_bl_ab_softmaxed)
AIC_result
model_bl_ab_softmaxed
AIC_result_table
#for (j in 1:length(beta_band)) {
j = 1
bl_ab_data$bl_ab <- get_softmaxed_value(beta_band[j], bl_ab_r)
model_bl_ab_softmaxed <- lm(RT ~ . -1, data = bl_ab_data)
AIC_result <- AIC(model_bl_ab_softmaxed)
AIC_result
AIC_result_table
plot(x = 1:length(bl_ab_softmax_parameters_matrix), y = bl_ab_softmax_parameters_matrix[,2])
plot(x = 1:length(bl_ab_softmax_parameters_matrix[,2]), y = bl_ab_softmax_parameters_matrix[,2])
bl_ab_softmax_parameters_matrix
for (j in 1:length(beta_band)) {
bl_ab_data$bl_ab <- get_softmaxed_value(beta_band[j], bl_ab_r)
model_bl_ab_softmaxed <- lm(RT ~ . -1, data = bl_ab_data)
AIC_result <- AIC(model_bl_ab_softmaxed)
bl_ab_softmax_parameters_matrix[j, 2] <- AIC_result
}
plot(x = 1:length(bl_ab_softmax_parameters_matrix[,2]), y = bl_ab_softmax_parameters_matrix[,2])
min(bl_ab_softmax_parameters_matrix[,2])
AIC_result_table
which(bl_ab_softmax_parameters_matrix[,2] == min(bl_ab_softmax_parameters_matrix[,2]))
bl_ab_data[1,10000]
bl_ab_data[10000,1]
bl_ab_data[10001,1]
bl_ab_softmax_parameters_matrix[10000,1]
