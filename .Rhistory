lm(RT_data ~ `_2a1d1CCC` + `_2a1d1e` + wang_2a1d1CCC, data = as_data_frame(pretest_data)) %>%
summary()
cor(pretest_data)
pretest_data <- cbind(RT_data, xia_2a1d1CCC, xia_2a1d1e, wang_2a1d1CCC, log(RT_data))
pretest_data
lm(log(RT_data) ~ `_2a1d1CCC` + `_2a1d1e` + wang_2a1d1CCC, data = as_data_frame(pretest_data)) %>%
summary()
cor(pretest_data)
install.packages(corrplot)
install.packages("corrplot")
cor(pretest_data)
library(corrplot)
corrplot(cor(pretest_data))
cor(pretest_data)
library(tidyverse)
sub1_data <-read_csv("/Users/dddd1007/project2git/cognitive_control_model/data/input/data_by_sub/sub_1_prepared_data.csv")
xia_model <- read_csv("/Users/dddd1007/project2git/cognitive_control_model/data/input/all_data_with_2a1d1CCC_2a1d1e.csv")
wang_model <- read.csv("/Users/dddd1007/project2git/cognitive_control_model/ref_code/Lingwang_CCC/model_results/RLCC_model_results_SR_Q_D_alphaCCC_V_WOB_sub_1.csv")
# 相关分析
RT_data = sub1_data$RT
xia_2a1d1e <- xia_model %>%
filter(Subject_num == 1) %>%
select(`_2a1d1e`)
xia_2a1d1CCC <- xia_model %>%
filter(Subject_num == 1) %>%
select(`_2a1d1CCC`)
wang_2a1d1CCC <- wang_model$P
pretest_data <- cbind(RT_data, xia_2a1d1CCC, xia_2a1d1e, wang_2a1d1CCC, log(RT_data))
lm(RT_data ~ `_2a1d1CCC` + `_2a1d1e` + wang_2a1d1CCC, data = as_data_frame(pretest_data)) %>%
summary()
lm(log(RT_data) ~ `_2a1d1CCC` + `_2a1d1e` + wang_2a1d1CCC, data = as_data_frame(pretest_data)) %>%
summary()
cor(pretest_data)
cor.test(pretest_data$RT, pretest_data$wang_2a1d1CCC)
foo <- lm(RT_data ~ `_2a1d1CCC` + `_2a1d1e` + wang_2a1d1CCC, data = as_data_frame(pretest_data))
str(foo)
str(summary(foo))
str(coef(foo))
coef(foo)
coefficients(foo)
str(summary(foo))
foo <- lm(RT_data ~ `_2a1d1CCC` + `_2a1d1e` + wang_2a1d1CCC, data = as_data_frame(pretest_data))
bar <- summary(foo)
bar$coefficients
temp <- bar$coefficients
str(temp)
temp[,4]
paste0("XIA",1)
lm_pvalue <- function(sub_num){
sub_data_path <- paste0("/Users/dddd1007/project2git/cognitive_control_model/data/input/data_by_sub/sub_", sub_num, "_prepared_data.csv")
wang_model_path <- paste0("/Users/dddd1007/project2git/cognitive_control_model/ref_code/Lingwang_CCC/model_results/RLCC_model_results_SR_Q_D_alphaCCC_V_WOB_sub_",
sub_num, ".csv")
sub_data <-read_csv(sub_data_path)
xia_model <- read_csv("/Users/dddd1007/project2git/cognitive_control_model/data/input/all_data_with_2a1d1CCC_2a1d1e.csv") %>%
filter(Subject_num == sub_num)
wang_model <- read.csv(wang_model_path)
RT_data = sub_data$RT
xia_2a1d1e <- xia_model %>%
select(`_2a1d1e`)
xia_2a1d1CCC <- xia_model %>%
select(`_2a1d1CCC`)
wang_2a1d1CCC <- wang_model$P
pretest_data <- cbind(RT_data, xia_2a1d1CCC, xia_2a1d1e, wang_2a1d1CCC, log(RT_data))
parameters <- lm(RT_data ~ `_2a1d1CCC` + `_2a1d1e` + wang_2a1d1CCC, data = as_data_frame(pretest_data)) %>%
summary()
return(parameters[,4])
}
lm_pvalue(1)
lm_pvalue <- function(sub_num){
sub_data_path <- paste0("/Users/dddd1007/project2git/cognitive_control_model/data/input/data_by_sub/sub_", sub_num, "_prepared_data.csv")
wang_model_path <- paste0("/Users/dddd1007/project2git/cognitive_control_model/ref_code/Lingwang_CCC/model_results/RLCC_model_results_SR_Q_D_alphaCCC_V_WOB_sub_",
sub_num, ".csv")
sub_data <-read_csv(sub_data_path)
xia_model <- read_csv("/Users/dddd1007/project2git/cognitive_control_model/data/input/all_data_with_2a1d1CCC_2a1d1e.csv") %>%
filter(Subject_num == sub_num)
wang_model <- read.csv(wang_model_path)
RT_data = sub_data$RT
xia_2a1d1e <- xia_model %>%
select(`_2a1d1e`)
xia_2a1d1CCC <- xia_model %>%
select(`_2a1d1CCC`)
wang_2a1d1CCC <- wang_model$P
pretest_data <- cbind(RT_data, xia_2a1d1CCC, xia_2a1d1e, wang_2a1d1CCC, log(RT_data))
parameters <- lm(RT_data ~ `_2a1d1CCC` + `_2a1d1e` + wang_2a1d1CCC, data = as_data_frame(pretest_data)) %>%
summary()
return(parameters$coefficients[,4])
}
lm_pvalue(1)
lm_pvalue <- function(sub_num){
sub_data_path <- paste0("/Users/dddd1007/project2git/cognitive_control_model/data/input/data_by_sub/sub_", sub_num, "_prepared_data.csv")
wang_model_path <- paste0("/Users/dddd1007/project2git/cognitive_control_model/ref_code/Lingwang_CCC/model_results/RLCC_model_results_SR_Q_D_alphaCCC_V_WOB_sub_",
sub_num, ".csv")
sub_data <-read_csv(sub_data_path, col_types = cols())
xia_model <- read_csv("/Users/dddd1007/project2git/cognitive_control_model/data/input/all_data_with_2a1d1CCC_2a1d1e.csv", col_types = cols()) %>%
filter(Subject_num == sub_num)
wang_model <- read.csv(wang_model_path)
RT_data = sub_data$RT
xia_2a1d1e <- xia_model %>%
select(`_2a1d1e`)
xia_2a1d1CCC <- xia_model %>%
select(`_2a1d1CCC`)
wang_2a1d1CCC <- wang_model$P
pretest_data <- cbind(RT_data, xia_2a1d1CCC, xia_2a1d1e, wang_2a1d1CCC, log(RT_data))
parameters <- lm(RT_data ~ `_2a1d1CCC` + `_2a1d1e` + wang_2a1d1CCC, data = as_data_frame(pretest_data)) %>%
summary()
return(parameters$coefficients[,4])
}
lm_pvalue(1)
foo <- 1:10
map(foo, lm_pvalue)
foo <- 1:10
foo %>%
map(lm_pvalue)
result_list <- list()
for (i in 1:36) {
print(i)
list[[i]] <- lm_pvalue(i)
}
result_list <- list()
for (i in 1:36) {
print(i)
result_list[[i]] <- lm_pvalue(i)
}
result_list <- list()
for (i in 1:36) {
print(i)
if(i == 7){next}
result_list[[i]] <- lm_pvalue(i)
}
result_list <- list()
for (i in 1:36) {
print(i)
if (i == 7) {
next
}
result_list[[i]] <- lm_pvalue(i)
}
result_list <- list()
for (i in 1:36) {
print(i)
if (i == 6) {
next
}
result_list[[i]] <- lm_pvalue(i)
}
lm_result_table <- do.call(rbind, result_list)
lm_result_table
lm_pvalue <- function(sub_num){
sub_data_path <- paste0("/Users/dddd1007/project2git/cognitive_control_model/data/input/data_by_sub/sub_", sub_num, "_prepared_data.csv")
wang_model_path <- paste0("/Users/dddd1007/project2git/cognitive_control_model/ref_code/Lingwang_CCC/model_results/RLCC_model_results_SR_Q_D_alphaCCC_V_WOB_sub_",
sub_num, ".csv")
sub_data <-read_csv(sub_data_path, col_types = cols())
xia_model <- read_csv("/Users/dddd1007/project2git/cognitive_control_model/data/input/all_data_with_2a1d1CCC_2a1d1e.csv", col_types = cols()) %>%
filter(Subject_num == sub_num)
wang_model <- read.csv(wang_model_path)
RT_data = sub_data$RT
xia_2a1d1e <- xia_model %>%
select(`_2a1d1e`)
xia_2a1d1CCC <- xia_model %>%
select(`_2a1d1CCC`)
wang_2a1d1CCC <- wang_model$P
pretest_data <- cbind(RT_data, xia_2a1d1CCC, xia_2a1d1e, wang_2a1d1CCC, log(RT_data))
parameters <- lm(RT_data ~ `_2a1d1e` + `_2a1d1CCC` + wang_2a1d1CCC, data = as_data_frame(pretest_data)) %>%
summary()
return(parameters$coefficients[,4])
}
result_list <- list()
for (i in 1:36) {
print(i)
if (i == 6) {
next
}
result_list[[i]] <- lm_pvalue(i)
}
lm_result_table <- do.call(rbind, result_list)
lm_result_table
cor(pretest_data$RT_data, pretest_data$wang_2a1d1CCC)
a <- c(1,2,3)
names(a) <- c("a", "b", "c")
a
cor_each <- function(sub_num){
sub_data_path <- paste0("/Users/dddd1007/project2git/cognitive_control_model/data/input/data_by_sub/sub_", sub_num, "_prepared_data.csv")
wang_model_path <- paste0("/Users/dddd1007/project2git/cognitive_control_model/ref_code/Lingwang_CCC/model_results/RLCC_model_results_SR_Q_D_alphaCCC_V_WOB_sub_",
sub_num, ".csv")
sub_data <-read_csv(sub_data_path, col_types = cols())
xia_model <- read_csv("/Users/dddd1007/project2git/cognitive_control_model/data/input/all_data_with_2a1d1CCC_2a1d1e.csv", col_types = cols()) %>%
filter(Subject_num == sub_num)
wang_model <- read.csv(wang_model_path)
RT_data = sub_data$RT
xia_2a1d1e <- xia_model %>%
select(`_2a1d1e`)
xia_2a1d1CCC <- xia_model %>%
select(`_2a1d1CCC`)
wang_2a1d1CCC <- wang_model$P
result <- c(cor(RT_data, xia_2a1d1CCC), cor(RT_data, xia_2a1d1e), cor(RT_data, wang_2a1d1CCC))
names(result) <- c("xia_2a1d1CCC", "xia_2a1d1e", "wang_2a1d1CCC")
return(result)
}
cor_each(1)
result_list <- list()
for (i in 1:36) {
print(i)
if (i == 6) {
next
}
result_list[[i]] <- cor_each(i)
}
cor_result_table = do.call(rbind, result_list)
cor_result_table
install.packages(c("bibliometrix", "brio", "coin", "DBI", "dplyr", "fansi", "fastmap", "ggrepel", "graphlayouts", "hms", "htmltools", "httpuv", "IRdisplay", "libcoin", "quantreg", "Rcpp", "repr", "shiny", "shinythemes", "tibble", "tinytex", "withr"))
install.packages(c("boot", "class", "nnet", "spatial"), lib="/usr/local/Cellar/r/4.0.3_2/lib/R/library")
## 导入数据
library(tidyverse)
raw_data <- read.csv("/Users/dddd1007/project2git/cognitive_control_model/data/output/summary/subdata_with_CCC_wang_2a1d1CCC.csv")
leading_index <- c()
for(i in 1:(nrow(raw_data)-1)){
leading_table <- raw_data[i,]
following_table <- raw_data[i+1,]
if(leading_table$stim_loc == following_table$stim_loc & leading_table$stim_color == following_table$stim_color){
leading_index <- append(leading_index, i)
}
conflict_index <- c()
for (i in 1:nrow(raw_data)) {
if (raw_data[i,]$if_below_CCC) {
conflict_index <- append(conflict_index, i)
}
same_and_conflict_index <- intersect(leading_index, conflict_index)
same_no_conflict_index <- setdiff(leading_index, conflict_index)
RT_conflict <- c()
RT_same <- c()
for (i in same_and_conflict_index) {
RT_conflict <- append(RT_conflict, (raw_data[i+1,]$RT - raw_data[i,]$RT))
}
for (i in same_no_conflict_index) {
RT_same <- append(RT_same, (raw_data[i+1,]$RT - raw_data[i,]$RT))
}
t.test(RT_conflict, RT_same)
library(perm)
permTS(RT_conflict, sample(RT_same, length(RT_conflict)), alternative="less")
raw_data %>%
filter(if_below_CCC == "TRUE") #%>%
raw_data
raw_data$if_below_CCC
raw_data %>%
filter(if_below_CCC == "true") #%>%
raw_data %>%
filter(if_below_CCC == "true") %>%
group_by(Subject_num) %>%
summarize(prop_inc = 1-mean(contingency))
raw_data %>%
filter(if_below_CCC == "true") %>%
group_by(Subject_num) %>%
summarize(prop_inc = 1-mean(contingency))
raw_data %>%
filter(if_below_CCC == "true") %>%
group_by(Subject_num) %>%
summarize(prop_inc = 1-mean(contingency))
raw_data %>%
filter(if_below_CCC == "true") %>%
group_by(Subject_num) %>%
summarize(prop_inc = 1-mean(contigency))
raw_data %>%
filter(if_below_CCC == "true") %>%
group_by(Subject_num) %>%
summarize(prop_inc = 1-mean(congruency))
raw_data %>%
filter(if_below_CCC == "true") %>%
group_by(Subject_num, congruency) %>%
summarize(prop_inc = 1-mean(congruency))
raw_data %>%
filter(if_below_CCC == "true") %>%
group_by(Subject_num, congruency) %>%
summarize(prop_inc = 1-mean(congruency))
raw_data %>%
filter(if_below_CCC == "true") %>%
group_by(Subject_num, prop) %>%
summarize(prop_inc = 1-mean(congruency))
prep_CCC <- c(false, raw_data$if_below_CCC)
prep_CCC <- c("false", raw_data$if_below_CCC)
prep_CCC
prep_CCC <- pop(c("false", raw_data$if_below_CCC))
prep_CCC <- prep_CCC[-length(prep_CCC)]
prep_CCC <- as.factor(prep_CCC[-length(prep_CCC)])
prep_CCC <- c("false", raw_data$if_below_CCC)
prep_CCC <- c("false", raw_data$if_below_CCC) %>%
as.factor(.[-length(.)])
prep_CCC <- c("false", raw_data$if_below_CCC)
prep_CCC <- as.factor(prep_CCC[-length(prep_CCC)])
lm_prep_data <- cbind(raw_data, prep_CCC)
lm(RT ~ prep_CCC) %>%
summary()
lm(RT ~ prep_CCC, data = lm_prep_data) %>%
summary()
lm(RT ~ prep_CCC + prop, lm_prep_data) %>%
summary()
### 选出当前的 CCC 相同的相同刺激物后续 trial , 查看其反应时
data_add_total_index <- cbind(lm_prep_data, 1:nrow(lm_prep_data))
current_CCC_table <- filter(data_add_total_index, if_below_CCC == "true")
current_CCC_table
### 选出当前的 CCC 相同的相同刺激物后续 trial , 查看其反应时
data_add_total_index <- cbind(lm_prep_data, total_index = 1:nrow(lm_prep_data))
current_CCC_table <- filter(data_add_total_index, if_below_CCC == "true")
CCC_current_table <- filter(data_add_total_index, if_below_CCC == "true")
CCC_current_index <- CCC_current_table$total_index
CCC_next_index <- c()
data_add_total_index <- cbind(lm_prep_data, total_index = 1:nrow(lm_prep_data))
CCC_current_table <- filter(data_add_total_index, if_below_CCC == "true")
CCC_current_index <- CCC_current_table$total_index
CCC_next_index <- c()
for(i in CCC_current_index){
cache_stim_loc   = data_add_total_index[i, ]$stim_loc
cache_stim_color = data_add_total_index[i, ]$stim_color
for(j in 1:10){
if(data_add_total_index[i+j, ]$stim_loc == cache_stim_loc & data_add_total_index[i+j, ]$stim_color == cache_stim_color){
CCC_next_index[i] = i+j
break
}else{
next
}
CCC_next_index
na.omit(CCC_next_index)
CCC_next_table = data_add_total_index[na.omit(CCC_current_index), ]
t.test(CCC_current_table$RT, CCC_current_table$RT)
t.test(CCC_current_table$RT, CCC_next_table$RT)
CCC_next_table = data_add_total_index[na.omit(CCC_next_index), ]
t.test(CCC_current_table$RT, CCC_next_table$RT)
t.test(CCC_current_table$RT, CCC_next_table$RT, alternative = "less")
t.test(CCC_current_table$RT, CCC_next_table$RT, alternative = "greater")
for(i in CCC_current_index){
cache_stim_loc   = data_add_total_index[i, ]$stim_loc
cache_stim_color = data_add_total_index[i, ]$stim_color
for(j in 1){
if(data_add_total_index[i+j, ]$stim_loc == cache_stim_loc & data_add_total_index[i+j, ]$stim_color == cache_stim_color){
CCC_next_index[i] = i+j
break
}else{
next
}
CCC_next_table = data_add_total_index[na.omit(CCC_next_index), ]
t.test(CCC_current_table$RT, CCC_next_table$RT, alternative = "greater")
library(tidyverse)
raw_data <- read_csv("/Users/dddd1007/project2git/cognitive_control_model/data/output/summary/subdata_with_CCC_wang_2a1d1CCC.csv")
install.packages(c("bibliometrix", "brio", "coin", "DBI", "dplyr", "fansi", "fastmap", "ggrepel", "graphlayouts", "hms", "htmltools", "httpuv", "IRdisplay", "libcoin", "memoise", "quantreg", "Rcpp", "repr", "shiny", "shinythemes", "tibble", "tinytex", "withr"))
install.packages(c("boot", "class", "nnet", "spatial"), lib="/usr/local/Cellar/r/4.0.3_2/lib/R/library")
install.packages(c("bibliometrix", "brio", "coin", "DBI", "dplyr", "fansi", "fastmap", "ggrepel", "graphlayouts", "hms", "htmltools", "httpuv", "IRdisplay", "libcoin", "memoise", "quantreg", "Rcpp", "repr", "shiny", "shinythemes", "tibble", "tinytex", "withr"))
install.packages(c("bibliometrix", "coin", "quantreg"))
library(tidyverse)
raw_data <- read_csv("/Users/dddd1007/project2git/cognitive_control_model/data/output/summary/subdata_with_CCC_wang_2a1d1CCC.csv")
raw_data
library(tidyverse)
raw_data <- read_csv("/Users/dddd1007/project2git/cognitive_control_model/data/output/summary/subdata_with_CCC_wang_2a1d1CCC.csv")
conflict_type <- rep(0, nrow(raw_data))
for (i in 1:nrow(raw_data)) {
if (raw_data[i,]$if_below_CCC) {
conflict_type[i] <- 2
}else if (!raw_data[i,]$if_below_CCC & raw_data[i,]$conflict < 0) {
conflict_type[i] <- 1
}else if (!raw_data[i,]$if_below_CCC & raw_data[i,]$conflict >= 0) {
conflict_type[i] <- 0
}
conflict_type
add_conflict_type_data <- cbind(raw_data, conflict_type)
devtools::install_github("REditorSupport/languageserver")
install.packages("devtools")
devtools::install_github("REditorSupport/languageserver")
knit_with_parameters('~/project2git/cognitive_control_model/notebooks/discover_CCC_impact_sub_behavior.Rmd')
ttest_two_type_trials_RT(add_nblock_table, c2_dloc_dcolor_index, c1_dloc_dcolor_index)
library(tidyverse)
library(here)
raw_data <- read_csv(here(
"data", "input",
"subdata_with_CCC_wang_2a1d1CCC.csv"
))
conflict_type <- rep(0, nrow(raw_data))
for (i in seq_len(nrow(raw_data))) {
if (raw_data[i, ]$if_below_CCC) {
conflict_type[i] <- 2
} else if (!raw_data[i, ]$if_below_CCC & raw_data[i, ]$conflict < 0) {
conflict_type[i] <- 1
} else if (!raw_data[i, ]$if_below_CCC & raw_data[i, ]$conflict >= 0) {
conflict_type[i] <- 0
}
head(conflict_type)
add_conflict_type_data <- cbind(raw_data, conflict_type)
add_conflict_type_data %>%
filter(conflict_type == 2) %>%
group_by(Subject, condition) %>%
summarise(prop_type_2 = n())
add_conflict_type_data %>%
filter(conflict_type == 1) %>%
group_by(Subject, condition) %>%
summarise(prop_type_1 = n())
add_conflict_type_data %>%
filter(conflict_type == 2) %>%
group_by(Subject) %>%
summarise(prop_type_2 = n())
add_conflict_type_data %>%
filter(conflict_type == 1) %>%
group_by(Subject) %>%
summarise(prop_type_1 = n())
change_block_index <- function(input_dataframe) {
prop_value <- input_dataframe$prop
block_value <- rep(0, length(prop_value))
block_index <- 1
last_prop <- prop_value[1]
for (i in seq_len(length(prop_value))) {
if (last_prop != prop_value[i]) {
block_index <- block_index + 1
last_prop <- prop_value[i]
}
block_value[i] <- block_index
}
input_dataframe$nblock <- block_value
return(input_dataframe)
}
add_nblock_list <- list()
for (i in seq_len(18)) {
foo <- filter(add_conflict_type_data, Subject_num == i)
add_nblock_list[[i]] <- change_block_index(foo)
}
add_nblock_table <- do.call(rbind, add_nblock_list)
add_nblock_table %>%
filter(conflict_type == 2) %>%
group_by(Subject, nblock) %>%
summarise(prop_type_2 = n()) %>%
ggplot() +
geom_line(aes(x = nblock, y = prop_type_2, colour = Subject))
add_nblock_table %>%
filter(conflict_type == 1) %>%
group_by(Subject, nblock) %>%
summarise(prop_type_1 = n()) %>%
ggplot() +
geom_line(aes(x = nblock, y = prop_type_1, colour = Subject))
# 变量命名规则: 在 conflict type 为 x 之后且刺激空间位置相同, 刺激颜色相同/不同的trial => cx_sloc_s/dcolor
c2_sloc_scolor_index <- c()
c2_sloc_dcolor_index <- c()
c2_dloc_scolor_index <- c()
c1_sloc_scolor_index <- c()
c1_sloc_dcolor_index <- c()
c1_dloc_scolor_index <- c()
c0_sloc_scolor_index <- c()
c0_sloc_dcolor_index <- c()
c0_dloc_scolor_index <- c()
# 提取不同条件的index
for (idx in seq_len(nrow(add_nblock_table))) {
if (idx == 1) {
next
}
last_line <- add_nblock_table[idx - 1, ]
current_line <- add_nblock_table[idx, ]
if (last_line$conflict_type == 2) {
if (last_line$stim_loc == current_line$stim_loc & last_line$stim_color == current_line$stim_color & last_line$Subject == current_line$Subject) {
c2_sloc_scolor_index <- append(c2_sloc_scolor_index, idx)
} else if (last_line$stim_loc == current_line$stim_loc & last_line$stim_color != current_line$stim_color & last_line$Subject == current_line$Subject) {
c2_sloc_dcolor_index <- append(c2_sloc_dcolor_index, idx)
} else if (last_line$stim_loc != current_line$stim_loc & last_line$stim_color == current_line$stim_color & last_line$Subject == current_line$Subject) {
c2_dloc_scolor_index <- append(c2_dloc_scolor_index, idx)
}
} else if (last_line$conflict_type == 1) {
if (last_line$stim_loc == current_line$stim_loc & last_line$stim_color == current_line$stim_color & last_line$Subject == current_line$Subject) {
c1_sloc_scolor_index <- append(c1_sloc_scolor_index, idx)
} else if (last_line$stim_loc == current_line$stim_loc & last_line$stim_color != current_line$stim_color & last_line$Subject == current_line$Subject) {
c1_sloc_dcolor_index <- append(c1_sloc_dcolor_index, idx)
} else if (last_line$stim_loc != current_line$stim_loc & last_line$stim_color == current_line$stim_color & last_line$Subject == current_line$Subject) {
c1_dloc_scolor_index <- append(c1_dloc_scolor_index, idx)
}
} else if (last_line$conflict_type == 0) {
if (last_line$stim_loc == current_line$stim_loc & last_line$stim_color == current_line$stim_color & last_line$Subject == current_line$Subject) {
c0_sloc_scolor_index <- append(c0_sloc_scolor_index, idx)
} else if (last_line$stim_loc == current_line$stim_loc & last_line$stim_color != current_line$stim_color & last_line$Subject == current_line$Subject) {
c0_sloc_dcolor_index <- append(c0_sloc_dcolor_index, idx)
} else if (last_line$stim_loc != current_line$stim_loc & last_line$stim_color == current_line$stim_color & last_line$Subject == current_line$Subject) {
c0_dloc_scolor_index <- append(c0_dloc_scolor_index, idx)
}
ttest_two_type_trials_RT <- function(input_dataframe, index1, index2) {
x_name <- paste0("mean_", deparse(substitute(index1)))
y_name <- paste0("mean_", deparse(substitute(index2)))
vector_1 <- input_dataframe[index1, ]$RT
vector_2 <- input_dataframe[index2, ]$RT
p_value <- rep(0, 3)
mean_x <- rep(0, 3)
mean_y <- rep(0, 3)
ttest_type <- c("two.sided", "less", "greater")
result1 <- t.test(vector_1, vector_2, alternative = c("two.sided"))
result2 <- t.test(vector_1, vector_2, alternative = c("less"))
result3 <- t.test(vector_1, vector_2, alternative = c("greater"))
p_value[1] <- result1$p.value
p_value[2] <- result2$p.value
p_value[3] <- result3$p.value
mean_x[1] <- result1$estimate[1]
mean_x[2] <- result2$estimate[1]
mean_x[3] <- result3$estimate[1]
mean_y[1] <- result1$estimate[2]
mean_y[2] <- result2$estimate[2]
mean_y[3] <- result3$estimate[2]
total_result <- data.frame(p_value, mean_x, mean_y, ttest_type)
colnames(total_result) <- c("p_value", x_name, y_name, "ttest_type")
return(total_result)
}
ttest_two_type_trials_RT(add_nblock_table, c2_sloc_scolor_index, c2_sloc_dcolor_index)
ttest_two_type_trials_RT(add_nblock_table, c1_sloc_scolor_index, c1_sloc_dcolor_index)
ttest_two_type_trials_RT(add_nblock_table, c0_sloc_scolor_index, c0_sloc_dcolor_index)
ttest_two_type_trials_RT(add_nblock_table, c2_sloc_scolor_index, c1_sloc_scolor_index)
ttest_two_type_trials_RT(add_nblock_table, c2_sloc_scolor_index, c0_sloc_scolor_index)
ttest_two_type_trials_RT(add_nblock_table, c1_sloc_scolor_index, c0_sloc_scolor_index)
ttest_two_type_trials_RT(add_nblock_table, c2_sloc_dcolor_index, c1_sloc_dcolor_index)
ttest_two_type_trials_RT(add_nblock_table, c2_sloc_dcolor_index, c0_sloc_dcolor_index)
ttest_two_type_trials_RT(add_nblock_table, c1_sloc_dcolor_index, c0_sloc_dcolor_index)
ttest_two_type_trials_RT(add_nblock_table, c2_dloc_scolor_index, c1_dloc_scolor_index)
ttest_two_type_trials_RT(add_nblock_table, c2_dloc_scolor_index, c0_dloc_scolor_index)
ttest_two_type_trials_RT(add_nblock_table, c1_dloc_scolor_index, c0_dloc_scolor_index)
ttest_two_type_trials_RT(add_nblock_table, c2_dloc_dcolor_index, c1_dloc_dcolor_index)
