group_by(Subject_num, congruency, prop, condition) %>%
summarise(mean_error_action = (1 - mean(correct_action)) * 100, .groups = "drop") %>%
anova_test(dv = mean_error_action, wid = Subject_num,
within = c(congruency, prop, condition)) -> error_rate_anova_table
error_rate_anova_table
#output anova result
set_flextable_defaults(digits = 3)
save_as_docx("RT" = flextable(RT_anova_table),
"error_rate" = flextable(error_rate_anova_table),
path = here("data", "output", "plot", "anova_table.docx"))
library(cmdstanr)
library(posterior)
library(bayesplot)
library(tidyverse)
check_cmdstan_toolchain()
library(cmdstanr)
library(posterior)
library(bayesplot)
library(tidyverse)
check_cmdstan_toolchain()
sr_1k1v_stanfile <- "/Users/dddd1007/project2git/cognitive_control_model/Models/stan_src/Bayesian_Models/bayesian_learner_sr_1k1v_neg_v.stan"
sr_1k1v_learner <- cmdstan_model(sr_1k1v_stanfile)
output_dir_1k1v <- "/Users/dddd1007/project2git/cognitive_control_model/data/output/bayesian_learner_samplers/1k1v_neg_v/"
#####
library(cmdstanr)
library(posterior)
library(bayesplot)
library(tidyverse)
check_cmdstan_toolchain()
sr_1k1v_stanfile <- "/Users/dddd1007/project2git/cognitive_control_model/Models/stan_src/Bayesian_Models/bayesian_learner_sr_1k1v_neg_v.stan"
sr_1k1v_learner <- cmdstan_model(sr_1k1v_stanfile)
output_dir_1k1v <- "/Users/dddd1007/project2git/cognitive_control_model/data/output/bayesian_learner_samplers/1k1v_neg_v/"
sr_1k1v_stanfile <- "/Users/dddd1007/project2git/cognitive_control_model/Models/stan_src/Bayesian_Models/bayesian_learner_sr_1k1v_neg_v.stan"
sr_1k1v_learner <- cmdstan_model(sr_1k1v_stanfile)
output_dir_1k1v <- "/Users/dddd1007/project2git/cognitive_control_model/data/output/bayesian_learner_samplers/1k1v_neg_v/"
# Load data
raw_data <- read.csv("/Users/dddd1007/project2git/cognitive_control_model/data/input/all_data_with_RL_BL_estimate_result.csv")
# Estimate each sub
sub_num_list <- unique(raw_data$Subject_num)
for (i in sub_num_list) {
single_sub_table <- filter(raw_data, Subject_num == i)
N <- nrow(single_sub_table)
corr_react <- single_sub_table$correct_action
space_loc <- single_sub_table$stim_loc_num
data_list <- list(N = N, corr_react = corr_react, space_loc = space_loc)
# model1 1k1v
file_save_path_1k1v <- paste0(output_dir_1k1v, "sub_", as.character(i))
dir.create(file_save_path_1k1v)
fit1 <- sr_1k1v_learner$sample(
data = data_list,
chains = 4,
parallel_chains = 4,
refresh = 500,
output_dir = file_save_path_1k1v
)
}
# Load data
raw_data <- read.csv("/Users/dddd1007/project2git/cognitive_control_model/data/input/all_data_with_I_hats.csv")
# Estimate each sub
sub_num_list <- unique(raw_data$Subject_num)
for (i in sub_num_list) {
single_sub_table <- filter(raw_data, Subject_num == i)
N <- nrow(single_sub_table)
corr_react <- single_sub_table$correct_action
space_loc <- single_sub_table$stim_loc_num
data_list <- list(N = N, corr_react = corr_react, space_loc = space_loc)
# model1 1k1v
file_save_path_1k1v <- paste0(output_dir_1k1v, "sub_", as.character(i))
dir.create(file_save_path_1k1v)
fit1 <- sr_1k1v_learner$sample(
data = data_list,
chains = 4,
parallel_chains = 4,
refresh = 500,
output_dir = file_save_path_1k1v
)
}
library(cmdstanr)
library(posterior)
library(bayesplot)
library(tidyverse)
check_cmdstan_toolchain()
sr_1k1v_stanfile <- "/Users/dddd1007/project2git/cognitive_control_model/Models/stan_src/Bayesian_Models/bayesian_learner_sr_1k1v_neg_v.stan"
sr_1k1v_learner <- cmdstan_model(sr_1k1v_stanfile)
output_dir_1k1v <- "/Users/dddd1007/project2git/cognitive_control_model/data/output/bayesian_learner_samplers/1k1v_neg_v/"
#####
##### Estimate Model
#####
# Load data
raw_data <- read.csv("/Users/dddd1007/project2git/cognitive_control_model/data/input/all_data_with_I_hats.csv")
# Estimate each sub
sub_num_list <- unique(raw_data$Subject_num)
for (i in sub_num_list) {
if (i < 8) {next}
print(paste0("==== Begin Subject ", as.character(i), " ====="))
single_sub_table <- filter(raw_data, Subject_num == i)
N <- nrow(single_sub_table)
corr_react <- single_sub_table$correct_action
space_loc <- single_sub_table$stim_loc_num
data_list <- list(N = N, corr_react = corr_react, space_loc = space_loc)
# model1 1k1v
file_save_path_1k1v <- paste0(output_dir_1k1v, "sub_", as.character(i))
dir.create(file_save_path_1k1v)
fit1 <- sr_1k1v_learner$sample(
data = data_list,
chains = 4,
parallel_chains = 4,
refresh = 500,
output_dir = file_save_path_1k1v
)
}
library(ggplot2)
library(tidyverse)
library(here)
library(ggsci)
library(ggthemes)
library(rstatix)
library(ggpubr)
library(patchwork)
all_data <- read.csv("/Users/dddd1007/project2git/cognitive_control_model/data/input/all_data_with_RL_BL_estimate_result.csv")
rl_model_param_sets <- read.csv("/Users/dddd1007/project2git/cognitive_control_model/data/output/rl_model_estimate_by_stim/rl_sr_sep_alpha_volatility_param_set.csv")
plot_data <- data.frame(
subject = all_data$Subject_num,
trials = all_data$Trial,
prop = all_data$prop * 0.01,
condition = all_data$condition,
RT = all_data$RT,
rl_p_ll_rr = (all_data$rl_sr_v_ll + all_data$rl_sr_v_rr) / 2,
bl_p_ll_rr = (all_data$bl_sr_ll + all_data$bl_sr_rr) / 2,
bl_p = all_data$bl_sr_r_selected,
rl_p = all_data$rl_sr_p_selected
)
subject_list <- unique(plot_data$subject)
added_condition_data <- list()
count_num <- 1
for (i in subject_list) {
tmp_data <- filter(plot_data, subject == i)
exp_condition <- paste(tmp_data$prop[1], tmp_data$condition[1], sep = "_")
added_condition_data[[count_num]] <- cbind(tmp_data,
exp_condition = exp_condition)
count_num <- count_num + 1
}
plot_data <- bind_rows(added_condition_data, .id = "column_label")
tmp_part1 <- plot_data %>%
select(-rl_p_ll_rr, -bl_p_ll_rr) %>%
pivot_longer(bl_p:rl_p, names_to = "model_type", values_to = "p") %>%
separate(model_type, c("model_type", NA), sep = "_")
tmp_part2 <- plot_data %>%
select(-bl_p, -rl_p) %>%
pivot_longer(bl_p_ll_rr:rl_p_ll_rr, names_to = "model_type_2",
values_to = "ll_rr") %>%
separate(model_type_2, c("model_type", NA, NA, NA), sep = "_")
plot_data <- left_join(tmp_part1, tmp_part2, by = c("subject", "trials", "model_type", "RT", "condition", "exp_condition", "prop")) %>%
select(-starts_with("column_label")) %>%
filter(exp_condition == "0.8_s" | exp_condition == "0.8_v")
# For bayesian learner data
##
# Step 1 : Making a ttest to compare the v under volatile / stable condition
# Step 2 : Plot the mean of v under each condition for every subjects
# get the mean of each sub under each conditions
bl_v_condition_sep <- select(all_data, "Subject_num", "condition", "bl_sr_v") %>%
group_by(Subject_num, condition) %>%
summarise(v_mean = mean(bl_sr_v), .groups = 'drop')
bl_v_condition_sep$condition <- factor(bl_v_condition_sep$condition)
paired_plot_data <- pivot_wider(bl_v_condition_sep,
names_from = "condition", values_from = "v_mean")
get_summary_stats(paired_plot_data, type = "common")
print("=== TTEST RESULT ===")
select(all_data, "Subject_num", "condition", "bl_sr_v") %>%
group_by(Subject_num, condition) %>%
summarise(v_mean = mean(bl_sr_v), .groups = 'drop') %>%
t_test(v_mean~condition, paired = TRUE)
select(all_data, "Subject_num", "condition", "bl_sr_v") %>%
group_by(Subject_num, condition) %>%
summarise(v_mean = mean(bl_sr_v), .groups = 'drop') %>%
cohens_d(v_mean~condition, paired = TRUE)
bl_v_plot <- ggpaired(paired_plot_data, cond1 = "s", cond2 = "v", color = "condition",
line.color = "gray", line.size = 0.3, ylab = "v means",
ylim = c(4.55, 5.75)) + stat_pvalue_manual(paird_ttest, label = "p", y.position = 5.75)
plot_data %>%
filter(subject %in% c(1, 11)) -> foo
model_estimate_plot <- ggline(data = foo, y = "ll_rr", x = "trials", color = "model_type",
plot_type = "l", size = 1,
ylab = "Probability of learning object", xlab = "Trials",
facet.by = c("exp_condition", "model_type"),
panel.labs = list(exp_condition = c("S-V", "V-S"),
model_type = c("Bayesian Learner",
"Reinforcement Learning")))
model_estimate_plot$layers <- c(geom_line(aes(x = trials, y = prop), color = "darkgray"),
model_estimate_plot$layers)
model_estimate_plot
ggsave("/Users/dddd1007/project2git/cognitive_control_model/data/output/plot/model_estimate.png",
width = 3000, height = 1500, units = "px",
plot = model_estimate_plot,
dpi = 350)
# For bayesian learner data
##
# Step 1 : Making a ttest to compare the v under volatile / stable condition
# Step 2 : Plot the mean of v under each condition for every subjects
# get the mean of each sub under each conditions
bl_v_condition_sep <- select(all_data, "Subject_num", "condition", "bl_sr_v") %>%
group_by(Subject_num, condition) %>%
summarise(v_mean = mean(bl_sr_v), .groups = 'drop')
bl_v_condition_sep$condition <- factor(bl_v_condition_sep$condition)
paired_plot_data <- pivot_wider(bl_v_condition_sep,
names_from = "condition", values_from = "v_mean")
get_summary_stats(paired_plot_data, type = "common")
print("=== TTEST RESULT ===")
select(all_data, "Subject_num", "condition", "bl_sr_v") %>%
group_by(Subject_num, condition) %>%
summarise(v_mean = mean(bl_sr_v), .groups = 'drop') %>%
t_test(v_mean~condition, paired = TRUE)
select(all_data, "Subject_num", "condition", "bl_sr_v") %>%
group_by(Subject_num, condition) %>%
summarise(v_mean = mean(bl_sr_v), .groups = 'drop') %>%
cohens_d(v_mean~condition, paired = TRUE)
bl_v_plot <- ggpaired(paired_plot_data, cond1 = "s", cond2 = "v", color = "condition",
line.color = "gray", line.size = 0.3, ylab = "v means",
ylim = c(4.55, 5.75)) + stat_pvalue_manual(paird_ttest, label = "p", y.position = 5.75)
library(ggplot2)
library(tidyverse)
library(here)
library(ggsci)
library(ggthemes)
library(rstatix)
library(ggpubr)
library(patchwork)
all_data <- read.csv("/Users/dddd1007/project2git/cognitive_control_model/data/input/all_data_with_RL_BL_estimate_result.csv")
rl_model_param_sets <- read.csv("/Users/dddd1007/project2git/cognitive_control_model/data/output/rl_model_estimate_by_stim/rl_sr_sep_alpha_volatility_param_set.csv")
head(all_data)
head(rl_model_param_sets)
plot_data <- data.frame(
subject = all_data$Subject_num,
trials = all_data$Trial,
prop = all_data$prop * 0.01,
condition = all_data$condition,
RT = all_data$RT,
rl_p_ll_rr = (all_data$rl_sr_v_ll + all_data$rl_sr_v_rr) / 2,
bl_p_ll_rr = (all_data$bl_sr_ll + all_data$bl_sr_rr) / 2,
bl_p = all_data$bl_sr_r_selected,
rl_p = all_data$rl_sr_p_selected
)
subject_list <- unique(plot_data$subject)
added_condition_data <- list()
count_num <- 1
for (i in subject_list) {
tmp_data <- filter(plot_data, subject == i)
exp_condition <- paste(tmp_data$prop[1], tmp_data$condition[1], sep = "_")
added_condition_data[[count_num]] <- cbind(tmp_data,
exp_condition = exp_condition)
count_num <- count_num + 1
}
plot_data <- bind_rows(added_condition_data, .id = "column_label")
tmp_part1 <- plot_data %>%
select(-rl_p_ll_rr, -bl_p_ll_rr) %>%
pivot_longer(bl_p:rl_p, names_to = "model_type", values_to = "p") %>%
separate(model_type, c("model_type", NA), sep = "_")
tmp_part2 <- plot_data %>%
select(-bl_p, -rl_p) %>%
pivot_longer(bl_p_ll_rr:rl_p_ll_rr, names_to = "model_type_2",
values_to = "ll_rr") %>%
separate(model_type_2, c("model_type", NA, NA, NA), sep = "_")
plot_data <- left_join(tmp_part1, tmp_part2, by = c("subject", "trials", "model_type", "RT", "condition", "exp_condition", "prop")) %>%
select(-starts_with("column_label")) %>%
filter(exp_condition == "0.8_s" | exp_condition == "0.8_v")
plot_data %>%
filter(subject %in% c(1, 11)) -> foo
model_estimate_plot <- ggline(data = foo, y = "ll_rr", x = "trials", color = "model_type",
plot_type = "l", size = 1,
ylab = "Probability of learning object", xlab = "Trials",
facet.by = c("exp_condition", "model_type"),
panel.labs = list(exp_condition = c("S-V", "V-S"),
model_type = c("Bayesian Learner",
"Reinforcement Learning")))
model_estimate_plot$layers <- c(geom_line(aes(x = trials, y = prop), color = "darkgray"),
model_estimate_plot$layers)
model_estimate_plot
ggsave("/Users/dddd1007/project2git/cognitive_control_model/data/output/plot/model_estimate.png",
width = 3000, height = 1500, units = "px",
plot = model_estimate_plot,
dpi = 350)
# For bayesian learner data
##
# Step 1 : Making a ttest to compare the v under volatile / stable condition
# Step 2 : Plot the mean of v under each condition for every subjects
# get the mean of each sub under each conditions
bl_v_condition_sep <- select(all_data, "Subject_num", "condition", "bl_sr_v") %>%
group_by(Subject_num, condition) %>%
summarise(v_mean = mean(bl_sr_v), .groups = 'drop')
bl_v_condition_sep$condition <- factor(bl_v_condition_sep$condition)
paired_plot_data <- pivot_wider(bl_v_condition_sep,
names_from = "condition", values_from = "v_mean")
get_summary_stats(paired_plot_data, type = "common")
print("=== TTEST RESULT ===")
select(all_data, "Subject_num", "condition", "bl_sr_v") %>%
group_by(Subject_num, condition) %>%
summarise(v_mean = mean(bl_sr_v), .groups = 'drop') %>%
t_test(v_mean~condition, paired = TRUE)
select(all_data, "Subject_num", "condition", "bl_sr_v") %>%
group_by(Subject_num, condition) %>%
summarise(v_mean = mean(bl_sr_v), .groups = 'drop') %>%
cohens_d(v_mean~condition, paired = TRUE)
bl_v_plot <- ggpaired(paired_plot_data, cond1 = "s", cond2 = "v", color = "condition",
line.color = "gray", line.size = 0.3, ylab = "v means",
ylim = c(4.55, 5.75)) + stat_pvalue_manual(paird_ttest, label = "p", y.position = 5.75)
# for reinforcement learning
## compare the mean alpha between stable and volatile condition
rl_model_param_sets %>%
select(sub, "alpha_s", "alpha_v") -> plot_data
names(plot_data) <- c("sub", "s", "v")
rl_alpha_ttest <- plot_data %>%
pivot_longer(cols = c("s", "v"), names_to = "type",
values_to = "alpha") %>%
t_test(alpha~type, paired = TRUE)
plot_data %>%
pivot_longer(cols = c("s", "v"), names_to = "type",
values_to = "alpha") %>%
cohens_d(alpha~type, paired = TRUE)
rl_alpha_plot <- ggpaired(plot_data,
cond1 = "s", cond2 = "v",
color = "condition",
line.color = "gray",
line.size = 0.3, ylab = "alpha means") + stat_pvalue_manual(rl_alpha_ttest, label = "p", y.position = 0.205)
rl_alpha_plot
# For bayesian learner data
##
# Step 1 : Making a ttest to compare the v under volatile / stable condition
# Step 2 : Plot the mean of v under each condition for every subjects
# get the mean of each sub under each conditions
bl_v_condition_sep <- select(all_data, "Subject_num", "condition", "bl_sr_v") %>%
group_by(Subject_num, condition) %>%
summarise(v_mean = mean(bl_sr_v), .groups = 'drop')
bl_v_condition_sep$condition <- factor(bl_v_condition_sep$condition)
paired_plot_data <- pivot_wider(bl_v_condition_sep,
names_from = "condition", values_from = "v_mean")
get_summary_stats(paired_plot_data, type = "common")
print("=== TTEST RESULT ===")
bl_v_ttest <- select(all_data, "Subject_num", "condition", "bl_sr_v") %>%
group_by(Subject_num, condition) %>%
summarise(v_mean = mean(bl_sr_v), .groups = 'drop') %>%
t_test(v_mean~condition, paired = TRUE)
select(all_data, "Subject_num", "condition", "bl_sr_v") %>%
group_by(Subject_num, condition) %>%
summarise(v_mean = mean(bl_sr_v), .groups = 'drop') %>%
cohens_d(v_mean~condition, paired = TRUE)
bl_v_plot <- ggpaired(paired_plot_data, cond1 = "s", cond2 = "v", color = "condition",
line.color = "gray", line.size = 0.3, ylab = "v means",
ylim = c(4.55, 5.75)) + stat_pvalue_manual(bl_v_ttest, label = "p", y.position = 5.75)
bl_v_plot
# For bayesian learner data
##
# Step 1 : Making a ttest to compare the v under volatile / stable condition
# Step 2 : Plot the mean of v under each condition for every subjects
# get the mean of each sub under each conditions
bl_v_condition_sep <- select(all_data, "Subject_num", "condition", "bl_sr_v") %>%
group_by(Subject_num, condition) %>%
summarise(v_mean = mean(bl_sr_v), .groups = 'drop')
bl_v_condition_sep$condition <- factor(bl_v_condition_sep$condition)
paired_plot_data <- pivot_wider(bl_v_condition_sep,
names_from = "condition", values_from = "v_mean")
get_summary_stats(paired_plot_data, type = "common")
print("=== TTEST RESULT ===")
bl_v_ttest <- select(all_data, "Subject_num", "condition", "bl_sr_v") %>%
group_by(Subject_num, condition) %>%
summarise(v_mean = mean(bl_sr_v), .groups = 'drop') %>%
t_test(v_mean~condition, paired = TRUE)
select(all_data, "Subject_num", "condition", "bl_sr_v") %>%
group_by(Subject_num, condition) %>%
summarise(v_mean = mean(bl_sr_v), .groups = 'drop') %>%
cohens_d(v_mean~condition, paired = TRUE)
bl_v_plot <- ggpaired(paired_plot_data, cond1 = "s", cond2 = "v", color = "condition",
line.color = "gray", line.size = 0.3, ylab = "v means",
ylim = c(-4.55, -5.75)) + stat_pvalue_manual(bl_v_ttest, label = "p", y.position = 5.75)
bl_v_plot
# For bayesian learner data
##
# Step 1 : Making a ttest to compare the v under volatile / stable condition
# Step 2 : Plot the mean of v under each condition for every subjects
# get the mean of each sub under each conditions
bl_v_condition_sep <- select(all_data, "Subject_num", "condition", "bl_sr_v") %>%
group_by(Subject_num, condition) %>%
summarise(v_mean = mean(bl_sr_v), .groups = 'drop')
bl_v_condition_sep$condition <- factor(bl_v_condition_sep$condition)
paired_plot_data <- pivot_wider(bl_v_condition_sep,
names_from = "condition", values_from = "v_mean")
get_summary_stats(paired_plot_data, type = "common")
print("=== TTEST RESULT ===")
bl_v_ttest <- select(all_data, "Subject_num", "condition", "bl_sr_v") %>%
group_by(Subject_num, condition) %>%
summarise(v_mean = mean(bl_sr_v), .groups = 'drop') %>%
t_test(v_mean~condition, paired = TRUE)
select(all_data, "Subject_num", "condition", "bl_sr_v") %>%
group_by(Subject_num, condition) %>%
summarise(v_mean = mean(bl_sr_v), .groups = 'drop') %>%
cohens_d(v_mean~condition, paired = TRUE)
bl_v_plot <- ggpaired(paired_plot_data, cond1 = "s", cond2 = "v", color = "condition",
line.color = "gray", line.size = 0.3, ylab = "v means",
ylim = c(-5.55, -4.75)) + stat_pvalue_manual(bl_v_ttest, label = "p", y.position = 5.75)
bl_v_plot
# For bayesian learner data
##
# Step 1 : Making a ttest to compare the v under volatile / stable condition
# Step 2 : Plot the mean of v under each condition for every subjects
# get the mean of each sub under each conditions
bl_v_condition_sep <- select(all_data, "Subject_num", "condition", "bl_sr_v") %>%
group_by(Subject_num, condition) %>%
summarise(v_mean = mean(bl_sr_v), .groups = 'drop')
bl_v_condition_sep$condition <- factor(bl_v_condition_sep$condition)
paired_plot_data <- pivot_wider(bl_v_condition_sep,
names_from = "condition", values_from = "v_mean")
get_summary_stats(paired_plot_data, type = "common")
print("=== TTEST RESULT ===")
bl_v_ttest <- select(all_data, "Subject_num", "condition", "bl_sr_v") %>%
group_by(Subject_num, condition) %>%
summarise(v_mean = mean(bl_sr_v), .groups = 'drop') %>%
t_test(v_mean~condition, paired = TRUE)
select(all_data, "Subject_num", "condition", "bl_sr_v") %>%
group_by(Subject_num, condition) %>%
summarise(v_mean = mean(bl_sr_v), .groups = 'drop') %>%
cohens_d(v_mean~condition, paired = TRUE)
bl_v_plot <- ggpaired(paired_plot_data, cond1 = "s", cond2 = "v", color = "condition",
line.color = "gray", line.size = 0.3, ylab = "v means",
ylim = c(-5.55, -4.0)) + stat_pvalue_manual(bl_v_ttest, label = "p", y.position = 5.75)
bl_v_plot
# For bayesian learner data
##
# Step 1 : Making a ttest to compare the v under volatile / stable condition
# Step 2 : Plot the mean of v under each condition for every subjects
# get the mean of each sub under each conditions
bl_v_condition_sep <- select(all_data, "Subject_num", "condition", "bl_sr_v") %>%
group_by(Subject_num, condition) %>%
summarise(v_mean = mean(bl_sr_v), .groups = 'drop')
bl_v_condition_sep$condition <- factor(bl_v_condition_sep$condition)
paired_plot_data <- pivot_wider(bl_v_condition_sep,
names_from = "condition", values_from = "v_mean")
get_summary_stats(paired_plot_data, type = "common")
print("=== TTEST RESULT ===")
bl_v_ttest <- select(all_data, "Subject_num", "condition", "bl_sr_v") %>%
group_by(Subject_num, condition) %>%
summarise(v_mean = mean(bl_sr_v), .groups = 'drop') %>%
t_test(v_mean~condition, paired = TRUE)
select(all_data, "Subject_num", "condition", "bl_sr_v") %>%
group_by(Subject_num, condition) %>%
summarise(v_mean = mean(bl_sr_v), .groups = 'drop') %>%
cohens_d(v_mean~condition, paired = TRUE)
bl_v_plot <- ggpaired(paired_plot_data, cond1 = "s", cond2 = "v", color = "condition",
line.color = "gray", line.size = 0.3, ylab = "v means",
ylim = c(-5.7, -4.3)) + stat_pvalue_manual(bl_v_ttest, label = "p", y.position = 5.75)
bl_v_plot
# For bayesian learner data
##
# Step 1 : Making a ttest to compare the v under volatile / stable condition
# Step 2 : Plot the mean of v under each condition for every subjects
# get the mean of each sub under each conditions
bl_v_condition_sep <- select(all_data, "Subject_num", "condition", "bl_sr_v") %>%
group_by(Subject_num, condition) %>%
summarise(v_mean = mean(bl_sr_v), .groups = 'drop')
bl_v_condition_sep$condition <- factor(bl_v_condition_sep$condition)
paired_plot_data <- pivot_wider(bl_v_condition_sep,
names_from = "condition", values_from = "v_mean")
get_summary_stats(paired_plot_data, type = "common")
print("=== TTEST RESULT ===")
bl_v_ttest <- select(all_data, "Subject_num", "condition", "bl_sr_v") %>%
group_by(Subject_num, condition) %>%
summarise(v_mean = mean(bl_sr_v), .groups = 'drop') %>%
t_test(v_mean~condition, paired = TRUE)
select(all_data, "Subject_num", "condition", "bl_sr_v") %>%
group_by(Subject_num, condition) %>%
summarise(v_mean = mean(bl_sr_v), .groups = 'drop') %>%
cohens_d(v_mean~condition, paired = TRUE)
bl_v_plot <- ggpaired(paired_plot_data, cond1 = "s", cond2 = "v", color = "condition",
line.color = "gray", line.size = 0.3, ylab = "v means",
ylim = c(-5.7, -4.4)) + stat_pvalue_manual(bl_v_ttest, label = "p", y.position = -4.4)
bl_v_plot
# patchwork
ggsave("/Users/dddd1007/project2git/cognitive_control_model/data/output/plot/model_parameters_test.png", bl_v_plot + rl_alpha_plot, width = 1800, height = 1500, units = "px", dpi = 350)
library(ggplot2)
library(tidyverse)
library(here)
library(ggsci)
library(ggthemes)
library(rstatix)
library(ggpubr)
library(patchwork)
all_data <- read.csv("/Users/dddd1007/project2git/cognitive_control_model/data/input/all_data_with_RL_BL_estimate_result.csv")
rl_model_param_sets <- read.csv("/Users/dddd1007/project2git/cognitive_control_model/data/output/rl_model_estimate_by_stim/rl_sr_sep_alpha_volatility_param_set.csv")
# For bayesian learner data
##
# Step 1 : Making a ttest to compare the v under volatile / stable condition
# Step 2 : Plot the mean of v under each condition for every subjects
# get the mean of each sub under each conditions
bl_v_condition_sep <- select(all_data, "Subject_num", "condition", "bl_sr_v") %>%
group_by(Subject_num, condition) %>%
summarise(v_mean = mean(bl_sr_v), .groups = 'drop')
bl_v_condition_sep$condition <- factor(bl_v_condition_sep$condition)
paired_plot_data <- pivot_wider(bl_v_condition_sep,
names_from = "condition", values_from = "v_mean")
get_summary_stats(paired_plot_data, type = "common")
print("=== TTEST RESULT ===")
bl_v_ttest <- select(all_data, "Subject_num", "condition", "bl_sr_v") %>%
group_by(Subject_num, condition) %>%
summarise(v_mean = mean(bl_sr_v), .groups = 'drop') %>%
t_test(v_mean~condition, paired = TRUE)
select(all_data, "Subject_num", "condition", "bl_sr_v") %>%
group_by(Subject_num, condition) %>%
summarise(v_mean = mean(bl_sr_v), .groups = 'drop') %>%
cohens_d(v_mean~condition, paired = TRUE)
bl_v_plot <- ggpaired(paired_plot_data, cond1 = "s", cond2 = "v", color = "condition",
line.color = "gray", line.size = 0.3, ylab = "v means",
ylim = c(-5.7, -4.4)) + stat_pvalue_manual(bl_v_ttest, label = "p", y.position = -4.4)
bl_v_plot
bl_v_ttest
